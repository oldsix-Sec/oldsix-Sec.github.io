<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[置顶]]></title>
    <url>%2F9102%2F01%2F01%2Ftop%2F</url>
    <content type="text"><![CDATA[该博客用于本人日常记录学习、复习过程，学习范围有Windows，Linux，安全，网络，C++，Python等内容，不定期更新！暂不开放评论功能（玻璃心）！]]></content>
  </entry>
  <entry>
    <title><![CDATA[SQL宽字节注入]]></title>
    <url>%2F2019%2F07%2F28%2FSQL%E5%AE%BD%E5%AD%97%E8%8A%82%E6%B3%A8%E5%85%A5%2F</url>
    <content type="text"><![CDATA[一、实验环境 Pikachu漏洞联系平台 （Windows+Phpstudy环境） 火狐浏览器（附带插件HackBar与FoxyProxy） BurpSuite_Pro v1.7.26 破解版 漏洞平台地址为：http://192.168.31.193/pika 二、漏洞概述在实际环境中，程序员很少会写一点防护都没有的代码，宽字节注入源于程序员设置MySQL连接时错误配置为“set character_set_client=gbk”，这样配置会引发编码转换从而导致注入漏洞， 正常情况下，当GPC开启或使用addslashes函数过滤GET或POST提交的参数时，攻击者使用的“&#39;”就会被转义为“\‘”。 但如果存在宽字节注入%df%27时，首先经过单引号转义成%df%5c%27（%5c是反斜杠\，%27是单引号’），之后在数据库查询前使用了GBK多字节编码，即在汉字编码范围内两个字节会被编码为有个汉字。 然后MySQL服务器会对查询语句进行GBK编码，即%df%5c转换成汉字“運”，而单引号逃逸了出来从而照成注入漏洞。 三、实验准备在我们使用的PIKACHU漏洞练习平台中，宽字节注入实验默认关闭了MySQL的错误描述显示，为方便学习理解，需要开启MySQL的错误描述：修改\pika\vul\sqli\sqli_widebyte.php文件,将$result=mysqli_query($link, $query);修改为$result=execute($link, $query); 四、实验演示 检测注入点使用Burp截断转发功能修改报文将修改完毕后的报文发送给WEB服务器，观察网页回显 12341%df&apos;==1運 &apos;=\&apos; \==%5c %df%5c%27==運&apos; 猜测该网页SQL的查询语句为：select id,email from *** where ***=&#39;$name&#39; 构造SQL注入语句构造查看数据库与用户的SQL语句注入结果 五、理解代码原理与代码加固 代码理解与分析 12345678910111213141516171819202122232425$link=connect();$html=&apos;&apos;;if(isset($_POST[&apos;submit&apos;]) &amp;&amp; $_POST[&apos;name&apos;]!=null)&#123; //escape在这的功能类似$name = addslashes($name) $name = escape($link,$_POST[&apos;name&apos;]); $query=&quot;select id,email from member where username=&apos;$name&apos;&quot;;//这里的变量是字符型，需要考虑闭合 //设置mysql客户端来源编码是gbk,这个设置导致出现宽字节注入问题 $set = &quot;set character_set_client=gbk&quot;; execute($link,$set); //mysqi_query不打印错误描述 //$result=mysqli_query($link, $query); $result=execute($link, $query); if(mysqli_num_rows($result) &gt;= 1)&#123; while ($data=mysqli_fetch_assoc($result))&#123; $id=$data[&apos;id&apos;]; $email=$data[&apos;email&apos;]; $html.=&quot;&lt;p class=&apos;notice&apos;&gt;your uid:&#123;$id&#125; &lt;br /&gt;your email is: &#123;$email&#125;&lt;/p&gt;&quot;; &#125; &#125;else&#123; $html.=&quot;&lt;p class=&apos;notice&apos;&gt;您输入的username不存在，请重新输入！&lt;/p&gt;&quot;; &#125;&#125; set character_set_client=gbk 是导致该漏洞的主要原因，其他代码会导致该漏洞，具体如下： 123set character_set_connection=gbk;set character_set_results=gbk;mysql_query(&quot;SET NAMES &apos;gbk&apos;&quot;); 代码加固与防护为了防止宽字节编码出现的参数问题，现在开发者基本上都会选择将MySQL连接配置为set character_set_client=binary来避免宽字节编码的问题发生。 12345678910111213141516171819202122232425262728$link=connect();$html=&apos;&apos;;if(isset($_POST[&apos;submit&apos;]) &amp;&amp; $_POST[&apos;name&apos;]!=null)&#123; $name = escape($link,$_POST[&apos;name&apos;]); $query=&quot;select id,email from member where username=&apos;$name&apos;&quot;;//这里的变量是字符型，需要考虑闭合 //设置mysql客户端来源编码是gbk,这个设置导致出现宽字节注入问题 //$set = &quot;set character_set_client=gbk&quot;; //将MySQL连接配置为binary $set = &quot;set character_set_client=binary&quot;; execute($link,$set); //mysqi_query不打印错误描述 //$result=mysqli_query($link, $query); $result=execute($link, $query); if(mysqli_num_rows($result) &gt;= 1)&#123; while ($data=mysqli_fetch_assoc($result))&#123; $id=$data[&apos;id&apos;]; $email=$data[&apos;email&apos;]; $html.=&quot;&lt;p class=&apos;notice&apos;&gt;your uid:&#123;$id&#125; &lt;br /&gt;your email is: &#123;$email&#125;&lt;/p&gt;&quot;; &#125; &#125;else&#123; $html.=&quot;&lt;p class=&apos;notice&apos;&gt;您输入的username不存在，请重新输入！&lt;/p&gt;&quot;; &#125;&#125; 测试防护效果]]></content>
      <categories>
        <category>WEB安全</category>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>SQL注入</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[pikachu环境搭建]]></title>
    <url>%2F2019%2F07%2F28%2Fpikachu%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%2F</url>
    <content type="text"><![CDATA[一、需求环境 Win7 64位 phpstudy 2018 pikachu-master(pikachu漏洞练习平台) 二、安装步骤 在Win7系统中安装phpStudy(官方版为一键解压包)启动phpstudy（Mysql默认用户：root，默认密码：root） 搭建pikachu漏洞练习平台将pikachu-master解压至C:\phpStudy\PHPTutorial\WWW（用于存放网页文件的目录）初始化pikachu平台访问http://127.0.0.1/pikachu-master/install.php 搭建完成，可以开始实验]]></content>
      <categories>
        <category>WEB安全</category>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SQL数字型注入-POST]]></title>
    <url>%2F2019%2F07%2F28%2FSQL%E6%95%B0%E5%AD%97%E5%9E%8B%E6%B3%A8%E5%85%A5-POST%2F</url>
    <content type="text"><![CDATA[一、实验环境 Pikachu漏洞联系平台 （Windows+Phpstudy环境） 火狐浏览器（附带插件HackBar与FoxyProxy） BurpSuite_Pro v1.7.26 破解版 漏洞平台地址为：http://192.168.31.193/pika 二、实验步骤 观察注入点尝试在表单的下拉菜单中提交任意数据，观察URL与网页URL：http://192.168.31.193/pika/vul/sqli/sqli_id.php ，如图2-1所示：可以看到页面回显正常，但URL部分没有传值参数，判断该网页请求方式为POST 检测注入点该网页请求方式为POST所以我们需要用到Hackbar或者BurpSuite，这里使用Burp设置好代理后重新提交参数，并用Burp截断HTTP的报文，如图2-2所示：将该报文发送至Repeater即可开始进行注入测试，如图2-3所示：尝试在id=1参数修改为id=1 or 1=1,然后发送报文，查看Response，如图2-4所示：可以看到我们拼接的逻辑运算语句正常运行，并把数据表中的所有数据都显示出来 查询显示的字段数尝试使用order by语句判断该网页表单能够显示的字段数，如图2-5所示： 获取当前数据库及运行数据库的用户名使用union select拼接SQL语句查看用户及数据库，如图2-6所示： 三、代码理解与防范 源代码(pika\vul\sqli\sqli_id.php) 12345678910111213141516171819$link=connect();$html=&apos;&apos;;if(isset($_POST[&apos;submit&apos;]) &amp;&amp; $_POST[&apos;id&apos;]!=null)&#123; //这里没有做任何处理，直接拼到select里面去了,形成Sql注入 $id=$_POST[&apos;id&apos;]; $query=&quot;select username,email from member where id=$id&quot;; $result=execute($link, $query); //这里如果用==1,会严格一点 if(mysqli_num_rows($result)&gt;=1)&#123; while($data=mysqli_fetch_assoc($result))&#123; $username=$data[&apos;username&apos;]; $email=$data[&apos;email&apos;]; $html.=&quot;&lt;p class=&apos;notice&apos;&gt;hello,&#123;$username&#125; &lt;br /&gt;your email is: &#123;$email&#125;&lt;/p&gt;&quot;; &#125; &#125;else&#123; $html.=&quot;&lt;p class=&apos;notice&apos;&gt;您输入的user id不存在，请重新输入！&lt;/p&gt;&quot;; &#125;&#125; 通过判断参数类型对网页起到防护作用 1234567891011121314151617181920$link=connect();$html=&apos;&apos;;//&amp;&amp; id_numeric($_POST[&apos;id&apos;])判断从网页传入的值是否为数字，如果带有其他字符将不运行后面的代码if(isset($_POST[&apos;submit&apos;]) &amp;&amp; $_POST[&apos;id&apos;]!=null &amp;&amp; id_numeric($_POST[&apos;id&apos;]))&#123; //这里没有做任何处理，直接拼到select里面去了,形成Sql注入 $id=$_POST[&apos;id&apos;]; //数字型注入与字符型注入不同的地方是因为id=$id并没有使用符号进行闭合 $query=&quot;select username,email from member where id=$id&quot;; $result=execute($link, $query); //这里如果用==1,会严格一点 if(mysqli_num_rows($result)&gt;=1)&#123; while($data=mysqli_fetch_assoc($result))&#123; $username=$data[&apos;username&apos;]; $email=$data[&apos;email&apos;]; $html.=&quot;&lt;p class=&apos;notice&apos;&gt;hello,&#123;$username&#125; &lt;br /&gt;your email is: &#123;$email&#125;&lt;/p&gt;&quot;; &#125; &#125;else&#123; $html.=&quot;&lt;p class=&apos;notice&apos;&gt;您输入的user id不存在，请重新输入！&lt;/p&gt;&quot;; &#125;&#125;]]></content>
      <categories>
        <category>WEB安全</category>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>SQL注入</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SQL字符型注入 （GET）]]></title>
    <url>%2F2019%2F07%2F27%2FSQL%E5%AD%97%E7%AC%A6%E5%9E%8B%E6%B3%A8%E5%85%A5-GET%2F</url>
    <content type="text"><![CDATA[一、实验环境 Pikachu漏洞联系平台 （Windows+Phpstudy环境） 火狐浏览器（附带插件HackBar） 漏洞平台地址为：http://192.168.31.193/pika 二、SQL注入原理数据库注入漏洞，主要是开发人员在构建代码时，没有对输入边界进行安全考虑，导致攻击可以通过合法的输入点提交一些精心构造的语句，从而欺骗后台数据库进行执行，导致数据库信息泄露的一种漏洞。 三、实验步骤 观察注入点尝试在表单中提交数据 kobe 观察URL：http://192.168.31.193/pika/vul/sqli/sqli_str.php?name=kobe&amp;submit=查询， 与网页中的表单，如图1-1所示： 检测注入点尝试在name=kobe参数后面加上 ‘ (URL编码为：%27）然后观察页面变化，URL:http://192.168.31.193/pika/vul/sqli/sqli_str.php?name=kobe&#39;submit=查询可以看到加上之后页面内容报错，出现这种现象大多数情况下时存在注入点，如图1-2所示: 查询显示的字段数尝试使用order by语句判断该网页表单能够显示的字段数，URL:http://192.168.31.193/pika/vul/sqli/sqli_str.php?name=1%27order+by+3+--+&amp;submit=查询， 出现“Unknown column ‘3’ in ‘order clause’” ，3表示已经超出表单的显示数量，所以该表单的字段的显示数量为2个字段，如图1-3所示： 获取当前数据库及运行数据库的用户名使用联合查询语句union select 获取当前的数据库及运行Mysql服务的用户URL:http://192.168.31.193/pika/vul/sqli/sqli_str.php?name=1%27union+select+database(),user()+--+&amp;submit=查询 ，效果如图1-4所示： 通过SQL注入漏洞读取WEB服务器本地的文件内容使用load_file()语句读取本地C盘中的flag.txt文件内容URL：http://192.168.31.193/pika/vul/sqli/sqli_str.php?name=1%27%20union%20select%20null,load_file(%22C:\\flag.txt%22)+--+&amp;submit=查询 ，效果如图1-5所示：flag.txt文件内容： 四、代码理解与防范 源代码(pika\vul\sqli\sqli_str.php) 12345678910111213141516171819$link=connect();$html=&apos;&apos;;if(isset($_GET[&apos;submit&apos;]) &amp;&amp; $_GET[&apos;name&apos;]!=null)&#123; //这里没有做任何处理，直接拼到select里面去了 $name=$_GET[&apos;name&apos;]; //这里的变量是字符型，需要考虑闭合 $query=&quot;select id,email from member where username=&apos;$name&apos;&quot;; $result=execute($link, $query) ; if(mysqli_num_rows($result)&gt;=1)&#123; while($data=mysqli_fetch_assoc($result))&#123; $id=$data[&apos;id&apos;]; $email=$data[&apos;email&apos;]; $html.=&quot;&lt;p class=&apos;notice&apos;&gt;your uid:&#123;$id&#125; &lt;br /&gt;your email is: &#123;$email&#125;&lt;/p&gt;&quot;; &#125; &#125;else&#123; $html.=&quot;&lt;p class=&apos;notice&apos;&gt;您输入的username不存在，请重新输入！&lt;/p&gt;&quot;; &#125;&#125; 通过函数转义的方式对源代码进行加固 123456789101112131415161718192021$link=connect();$html=&apos;&apos;;if(isset($_GET[&apos;submit&apos;]) &amp;&amp; $_GET[&apos;name&apos;]!=null)&#123; //这里没有做任何处理，直接拼到select里面去了 $name=$_GET[&apos;name&apos;]; //addslashes()若$name所传入的字符串中带有特殊字符，则该函数会在特殊符号前添加“/”，表示将其转义 //$name = addslashes($name); //这里的变量是字符型，需要考虑闭合 $query=&quot;select id,email from member where username=&apos;$name&apos;&quot;; $result=execute($link, $query) ; if(mysqli_num_rows($result)&gt;=1)&#123; while($data=mysqli_fetch_assoc($result))&#123; $id=$data[&apos;id&apos;]; $email=$data[&apos;email&apos;]; $html.=&quot;&lt;p class=&apos;notice&apos;&gt;your uid:&#123;$id&#125; &lt;br /&gt;your email is: &#123;$email&#125;&lt;/p&gt;&quot;; &#125; &#125;else&#123; $html.=&quot;&lt;p class=&apos;notice&apos;&gt;您输入的username不存在，请重新输入！&lt;/p&gt;&quot;; &#125;&#125; 测试防护效果]]></content>
      <categories>
        <category>WEB安全</category>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>SQL注入</tag>
      </tags>
  </entry>
</search>
